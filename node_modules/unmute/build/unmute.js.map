{"version":3,"sources":["webpack://UnmuteButton/webpack/universalModuleDefinition","webpack://UnmuteButton/webpack/bootstrap","webpack://UnmuteButton/./node_modules/tone/Tone/core/Tone.js","webpack://UnmuteButton/./node_modules/tone/Tone/core/Context.js","webpack://UnmuteButton/./node_modules/tone/Tone/core/AudioNode.js","webpack://UnmuteButton/./node_modules/tone/Tone/core/Gain.js","webpack://UnmuteButton/./node_modules/events/events.js","webpack://UnmuteButton/./node_modules/tone/Tone/type/Type.js","webpack://UnmuteButton/./node_modules/tone/Tone/shim/AudioContext.js","webpack://UnmuteButton/./node_modules/tone/Tone/signal/Signal.js","webpack://UnmuteButton/./node_modules/tone/Tone/type/Frequency.js","webpack://UnmuteButton/./node_modules/tone/Tone/type/TimeBase.js","webpack://UnmuteButton/./node_modules/tone/Tone/type/Time.js","webpack://UnmuteButton/./node_modules/tone/Tone/core/Param.js","webpack://UnmuteButton/./node_modules/tone/Tone/shim/OfflineAudioContext.js","webpack://UnmuteButton/./node_modules/tone/Tone/core/Timeline.js","webpack://UnmuteButton/./node_modules/tone/Tone/signal/SignalBase.js","webpack://UnmuteButton/./node_modules/tone/Tone/signal/WaveShaper.js","webpack://UnmuteButton/./images/volume-off.svg","webpack://UnmuteButton/./images/volume-on.svg","webpack://UnmuteButton/./src/Toggle.js","webpack://UnmuteButton/./src/AudioContext.js","webpack://UnmuteButton/./src/AudioElement.js","webpack://UnmuteButton/./src/ScriptElement.js","webpack://UnmuteButton/./src/Unmute.js","webpack://UnmuteButton/./node_modules/style-loader/lib/urls.js","webpack://UnmuteButton/./node_modules/style-loader/lib/addStyles.js","webpack://UnmuteButton/./node_modules/css-loader/lib/css-base.js","webpack://UnmuteButton/./src/unmute.scss","webpack://UnmuteButton/./src/unmute.scss?bc6f","webpack://UnmuteButton/./node_modules/tone/Tone/component/Volume.js","webpack://UnmuteButton/./node_modules/tone/Tone/core/Master.js","webpack://UnmuteButton/./node_modules/tone/Tone/core/OfflineContext.js","webpack://UnmuteButton/./node_modules/tone/Tone/shim/BufferSourceNode.js","webpack://UnmuteButton/./node_modules/tone/Tone/shim/ConstantSourceNode.js","webpack://UnmuteButton/./node_modules/tone/Tone/component/Split.js","webpack://UnmuteButton/./node_modules/tone/Tone/type/TransportTime.js","webpack://UnmuteButton/./node_modules/tone/Tone/signal/Zero.js","webpack://UnmuteButton/./node_modules/tone/Tone/component/Merge.js","webpack://UnmuteButton/./node_modules/tone/Tone/shim/WaveShaperNode.js","webpack://UnmuteButton/./node_modules/tone/Tone/core/Emitter.js","webpack://UnmuteButton/./node_modules/tone/Tone/shim/StereoPannerNode.js","webpack://UnmuteButton/./node_modules/tone/Tone/version.js","webpack://UnmuteButton/(webpack)/buildin/global.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","undefined","version","Tone","this","Error","toString","className","isLetter","match","sameConstructor","constructor","isFunction","dispose","set","params","rampTime","isObject","isString","tmpObj","paramLoop","attr","parent","indexOf","attrSplit","split","length","splice","innerParam","join","param","isUndef","Signal","Param","rampTo","AudioParam","TimeBase","_collectDefaults","ret","subRet","j","subAttr","isDefined","constr","defaults","keys","_super","superDefs","push","values","options","defaultArg","given","fallback","givenProp","fallbackProp","log","debug","global","TONE_DEBUG_CLASS","args","Array","from","arguments","unshift","console","apply","assert","statement","error","connectSeries","currentUnit","toUnit","connect","val","isNumber","arg","isBoolean","isArray","isNote","test","noOp","_readOnly","writable","_writable","State","Started","Stopped","Paused","equalPowerScale","percent","piFactor","Math","PI","sin","dbToGain","db","pow","gainToDb","gain","LN10","intervalToFrequencyRatio","interval","now","context","immediate","currentTime","extend","child","TempConstructor","_audioContext","isContext","Context","emit","setContext","ctx","sampleRate","hasAudioContext","hasPromises","Boolean","getContext","resolve","initialized","resCallback","off","on","Emitter","AudioContext","_context","rawContext","prop","_defineProperty","_latencyHint","latencyHint","_constants","lookAhead","_computedUpdateInterval","_ticker","Ticker","bind","clockSource","updateInterval","_timeouts","Timeline","_timeoutIds","_timeoutLoop","onstatechange","e","mixin","master","destination","resume","state","Promise","close","closePromise","TONE_AUDIO_CONTEXT","then","getConstant","buffer","createBuffer","arr","getChannelData","constant","createBufferSource","channelCount","channelCountMode","loop","start","peek","time","shift","callback","setTimeout","fn","timeout","add","id","clearTimeout","forEach","event","remove","type","hint","con","disconnect","_type","_updateInterval","_callback","_createClock","Type","Worker","Timeout","Offline","_createWorker","URL","webkitURL","blob","Blob","toFixed","blobUrl","createObjectURL","worker","onmessage","_worker","_createTimeout","_timeout","max","postMessage","_disposeClock","terminate","nativeConnect","AudioNode","nativeDisconnect","toneConnect","B","outNum","inNum","input","supported","TONE_SILENCE_VERSION_LOGGING","prefix","printString","warn","createInsOuts","inputs","outputs","createGain","output","channelInterpretation","unit","outputNum","inputNum","chain","fan","Gain","_gainNode","units","convert","EventEmitter","_events","_maxListeners","isUndefined","defaultMaxListeners","setMaxListeners","isNaN","TypeError","er","handler","len","listeners","err","slice","addListener","listener","newListener","warned","trace","once","fired","g","removeListener","list","position","removeAllListeners","key","listenerCount","evlistener","emitter","Default","Time","Frequency","TransportTime","Ticks","NormalRange","AudioRange","Decibels","Interval","BPM","Positive","Cents","Degrees","MIDI","BarsBeatsSixteenths","Samples","Hertz","Note","Milliseconds","Seconds","Notation","toSeconds","toFrequency","freq","valueOf","toTicks","Transport","ticks","webkitAudioContext","suspend","source","createGainNode","createDelay","createDelayNode","decodeAudioDataPromise","offlineContext","OfflineAudioContext","audioData","Uint32Array","decodeAudioData","_native_decodeAudioData","success","_constantSource","createConstantSource","_param","offset","SignalBase","getValueAtTime","_expressions","assign","midi","regexp","method","_defaultUnits","mtof","note","pitch","octave","noteNumber","noteToScaleIndex","toLowerCase","parseInt","tr","q","total","_beatsToUnits","_getTimeSignature","parseFloat","transpose","harmonize","intervals","map","toMidi","ftom","toNote","log2","A4","round","floor","scaleIndexToNote","quarterTime","quarters","PPQ","_noArg","_frequencyToUnits","_ticksToUnits","bpm","beats","_secondsToUnits","seconds","cbb","cb","c#","cx","dbb","d#","dx","ebb","eb","e#","ex","fbb","fb","f","f#","fx","gbb","gb","g#","gx","abb","ab","a","a#","ax","bbb","bb","b","b#","bx","frequency","_val","_units","charAt","dot","scalar","t","hz","samples","default","_getBpm","timeSignature","_getPPQ","_now","trim","typeName","quantity","expr","matching","toSamples","toMilliseconds","quantize","capture","quantTo","nextSubdivision","subdiv","subdivision","toNotation","testNotations","power","closest","closestSeconds","notation","notationSeconds","abs","toBarsBeatsSixteenths","measures","sixteenths","overridden","setValueAtTime","_toUnits","_initialValue","_fromUnits","cancelScheduledValues","Infinity","minValue","maxValue","min","_minOutput","AutomationType","Linear","Exponential","Target","SetValue","Cancel","after","getAfter","before","initialValue","defaultValue","previousVal","previous","getBefore","_exponentialApproach","_linearInterpolate","_exponentialInterpolate","setRampPoint","currentVal","cancelAndHoldAtTime","linearRampToValueAtTime","endTime","exponentialRampToValueAtTime","exponentialRampTo","startTime","linearRampTo","targetRampTo","exponentialApproachValueAtTime","timeConstant","setTargetAtTime","setValueCurveAtTime","duration","scaling","segTime","cancel","valueAtTime","t0","v0","v1","exp","t1","webkitOfflineAudioContext","startRendering","_native_startRendering","done","oncomplete","renderedBuffer","_timeline","memory","index","_search","diff","comparator","cancelBefore","previousEvent","beginning","end","midPoint","nextEvent","_iterate","lowerBound","upperBound","forEachBefore","forEachAfter","forEachBetween","forEachFrom","forEachAtTime","node","outputNumber","inputNumber","WaveShaper","mapping","bufferLen","_shaper","createWaveShaper","_curve","curve","isFinite","Float32Array","setMap","array","normalized","oversample","oversampling","includes","RangeError","Toggle_Toggle","events","container","super","element","document","createElement","setAttribute","appendChild","addEventListener","mute","classList","contains","innerHTML","volume_off_default","volume_on_default","click","AudioContext_Context","tone","Tone_default","Master","currentmute","requestAnimationFrame","started","toggleMute","silentAudio","AudioElement","title","controls","preload","src","play","currentScript","Unmute_Unmute","body","_button","_audioElement","UnmuteButton","addButtonAttr","getAttribute","readyState","addButton","css","location","baseUrl","protocol","host","currentDir","pathname","replace","fullMatch","origUrl","newUrl","unquotedOrigUrl","$1","JSON","stringify","memo","stylesInDom","isOldIE","all","atob","getElement","target","styleTarget","querySelector","HTMLIFrameElement","contentDocument","head","singleton","singletonCounter","stylesInsertedAtTop","fixUrls","addStylesToDom","styles","item","domStyle","refs","parts","addStyle","listToStyles","newStyles","base","part","media","sourceMap","insertStyleElement","style","insertInto","lastStyleElementInsertedAtTop","insertAt","nextSibling","insertBefore","firstChild","removeStyleElement","parentNode","removeChild","idx","createStyleElement","attrs","addAttrs","el","obj","update","result","transform","styleIndex","applyToSingletonTag","revokeObjectURL","btoa","link","rel","createLinkElement","autoFixUrls","convertToAbsoluteUrls","unescape","encodeURIComponent","oldSrc","href","styleSheet","cssText","createTextNode","newObj","DEBUG","newList","mayRemove","textStore","replaceText","replacement","filter","cssNode","childNodes","useSourceMap","content","cssMapping","sourceMapping","sourceURLs","sources","sourceRoot","concat","cssWithMappingToString","mediaQuery","alreadyImportedModules","hmr","locals","Volume","volume","_unmutedVolume","_volume","isMaster","toMaster","MasterConstructor","OfflineContext","channels","_duration","_currentTime","render","blockTime","ua","navigator","userAgent","bufferSource","_native_start","ConstantSourceNode","_bufferSource","gainNode","_output","stop","Split","_splitter","createChannelSplitter","left","right","Zero","_gain","Merge","_merger","createChannelMerger","WaveShaperNode","_internalNode","_native_createWaveShaper","eventName","boundCallback","ev","eventList","functions","func","emitterFunc","createStereoPanner","StereoPannerNode","pan","rightWaveShaper","leftWaveShaper","leftGain","rightGain","merge","Function","eval"],"mappings":"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","file":"unmute.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"UnmuteButton\"] = factory();\n\telse\n\t\troot[\"UnmuteButton\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 18);\n","/**\n *  Tone.js\n *  @author Yotam Mann\n *  @license http://opensource.org/licenses/MIT MIT License\n *  @copyright 2014-2018 Yotam Mann\n */\ndefine([\"../version\"], function(version){\n\n\t\"use strict\";\n\n\t///////////////////////////////////////////////////////////////////////////\n\t//\tTONE\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  @class  Tone is the base class of all other classes.\n\t *  @constructor\n\t */\n\tvar Tone = function(){\n\t\tif (!(this instanceof Tone)){\n\t\t\tthrow new Error(\"constructor needs to be called with the 'new' keyword\");\n\t\t}\n\t};\n\n\t/**\n\t *  @memberOf Tone#\n\t *  @returns {String} returns the name of the class as a string\n\t */\n\tTone.prototype.toString = function(){\n\t\tfor (var className in Tone){\n\t\t\tvar isLetter = className[0].match(/^[A-Z]$/);\n\t\t\tvar sameConstructor = Tone[className] === this.constructor;\n\t\t\tif (Tone.isFunction(Tone[className]) && isLetter && sameConstructor){\n\t\t\t\treturn className;\n\t\t\t}\n\t\t}\n\t\treturn \"Tone\";\n\t};\n\n\t/**\n\t *  @memberOf Tone#\n\t *  disconnect and dispose\n\t *  @returns {Tone} this\n\t */\n\tTone.prototype.dispose = function(){\n\t\treturn this;\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////\n\t//\tGET/SET\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Set the parameters at once. Either pass in an\n\t *  object mapping parameters to values, or to set a\n\t *  single parameter, by passing in a string and value.\n\t *  The last argument is an optional ramp time which\n\t *  will ramp any signal values to their destination value\n\t *  over the duration of the rampTime.\n\t *  @param {Object|String} params\n\t *  @param {Number=} value\n\t *  @param {Time=} rampTime\n\t *  @returns {Tone} this\n\t *  @memberOf Tone#\n\t *  @example\n\t * //set values using an object\n\t * filter.set({\n\t * \t\"frequency\" : 300,\n\t * \t\"type\" : highpass\n\t * });\n\t *  @example\n\t * filter.set(\"type\", \"highpass\");\n\t *  @example\n\t * //ramp to the value 220 over 3 seconds.\n\t * oscillator.set({\n\t * \t\"frequency\" : 220\n\t * }, 3);\n\t */\n\tTone.prototype.set = function(params, value, rampTime){\n\t\tif (Tone.isObject(params)){\n\t\t\trampTime = value;\n\t\t} else if (Tone.isString(params)){\n\t\t\tvar tmpObj = {};\n\t\t\ttmpObj[params] = value;\n\t\t\tparams = tmpObj;\n\t\t}\n\n\t\tparamLoop:\n\t\tfor (var attr in params){\n\t\t\tvalue = params[attr];\n\t\t\tvar parent = this;\n\t\t\tif (attr.indexOf(\".\") !== -1){\n\t\t\t\tvar attrSplit = attr.split(\".\");\n\t\t\t\tfor (var i = 0; i < attrSplit.length - 1; i++){\n\t\t\t\t\tparent = parent[attrSplit[i]];\n\t\t\t\t\tif (parent instanceof Tone){\n\t\t\t\t\t\tattrSplit.splice(0, i+1);\n\t\t\t\t\t\tvar innerParam = attrSplit.join(\".\");\n\t\t\t\t\t\tparent.set(innerParam, value);\n\t\t\t\t\t\tcontinue paramLoop;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tattr = attrSplit[attrSplit.length - 1];\n\t\t\t}\n\t\t\tvar param = parent[attr];\n\t\t\tif (Tone.isUndef(param)){\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif ((Tone.Signal && param instanceof Tone.Signal) ||\n\t\t\t\t\t(Tone.Param && param instanceof Tone.Param)){\n\t\t\t\tif (param.value !== value){\n\t\t\t\t\tif (Tone.isUndef(rampTime)){\n\t\t\t\t\t\tparam.value = value;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tparam.rampTo(value, rampTime);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (param instanceof AudioParam){\n\t\t\t\tif (param.value !== value){\n\t\t\t\t\tparam.value = value;\n\t\t\t\t}\n\t\t\t} else if (Tone.TimeBase && param instanceof Tone.TimeBase){\n\t\t\t\tparent[attr] = value;\n\t\t\t} else if (param instanceof Tone){\n\t\t\t\tparam.set(value);\n\t\t\t} else if (param !== value){\n\t\t\t\tparent[attr] = value;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Get the object's attributes. Given no arguments get\n\t *  will return all available object properties and their corresponding\n\t *  values. Pass in a single attribute to retrieve or an array\n\t *  of attributes. The attribute strings can also include a \".\"\n\t *  to access deeper properties.\n\t *  @memberOf Tone#\n\t *  @example\n\t * osc.get();\n\t * //returns {\"type\" : \"sine\", \"frequency\" : 440, ...etc}\n\t *  @example\n\t * osc.get(\"type\");\n\t * //returns { \"type\" : \"sine\"}\n\t * @example\n\t * //use dot notation to access deep properties\n\t * synth.get([\"envelope.attack\", \"envelope.release\"]);\n\t * //returns {\"envelope\" : {\"attack\" : 0.2, \"release\" : 0.4}}\n\t *  @param {Array=|string|undefined} params the parameters to get, otherwise will return\n\t *  \t\t\t\t\t                  all available.\n\t *  @returns {Object}\n\t */\n\tTone.prototype.get = function(params){\n\t\tif (Tone.isUndef(params)){\n\t\t\tparams = this._collectDefaults(this.constructor);\n\t\t} else if (Tone.isString(params)){\n\t\t\tparams = [params];\n\t\t}\n\t\tvar ret = {};\n\t\tfor (var i = 0; i < params.length; i++){\n\t\t\tvar attr = params[i];\n\t\t\tvar parent = this;\n\t\t\tvar subRet = ret;\n\t\t\tif (attr.indexOf(\".\") !== -1){\n\t\t\t\tvar attrSplit = attr.split(\".\");\n\t\t\t\tfor (var j = 0; j < attrSplit.length - 1; j++){\n\t\t\t\t\tvar subAttr = attrSplit[j];\n\t\t\t\t\tsubRet[subAttr] = subRet[subAttr] || {};\n\t\t\t\t\tsubRet = subRet[subAttr];\n\t\t\t\t\tparent = parent[subAttr];\n\t\t\t\t}\n\t\t\t\tattr = attrSplit[attrSplit.length - 1];\n\t\t\t}\n\t\t\tvar param = parent[attr];\n\t\t\tif (Tone.isObject(params[attr])){\n\t\t\t\tsubRet[attr] = param.get();\n\t\t\t} else if (Tone.Signal && param instanceof Tone.Signal){\n\t\t\t\tsubRet[attr] = param.value;\n\t\t\t} else if (Tone.Param && param instanceof Tone.Param){\n\t\t\t\tsubRet[attr] = param.value;\n\t\t\t} else if (param instanceof AudioParam){\n\t\t\t\tsubRet[attr] = param.value;\n\t\t\t} else if (param instanceof Tone){\n\t\t\t\tsubRet[attr] = param.get();\n\t\t\t} else if (!Tone.isFunction(param) && Tone.isDefined(param)){\n\t\t\t\tsubRet[attr] = param;\n\t\t\t}\n\t\t}\n\t\treturn ret;\n\t};\n\n\t/**\n\t *  collect all of the default attributes in one\n\t *  @private\n\t *  @param {Function} constr the constructor to find the defaults from\n\t *  @return {Array} all of the attributes which belong to the class\n\t */\n\tTone.prototype._collectDefaults = function(constr){\n\t\tvar ret = [];\n\t\tif (Tone.isDefined(constr.defaults)){\n\t\t\tret = Object.keys(constr.defaults);\n\t\t}\n\t\tif (Tone.isDefined(constr._super)){\n\t\t\tvar superDefs = this._collectDefaults(constr._super);\n\t\t\t//filter out repeats\n\t\t\tfor (var i = 0; i < superDefs.length; i++){\n\t\t\t\tif (ret.indexOf(superDefs[i]) === -1){\n\t\t\t\t\tret.push(superDefs[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn ret;\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////\n\t//\tDEFAULTS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  @memberOf Tone\n\t *  @param  {Array}  values  The arguments array\n\t *  @param  {Array}  keys    The names of the arguments\n\t *  @param {Function|Object} constr The class constructor\n\t *  @return  {Object}  An object composed of the  defaults between the class' defaults\n\t *                        and the passed in arguments.\n\t */\n\tTone.defaults = function(values, keys, constr){\n\t\tvar options = {};\n\t\tif (values.length === 1 && Tone.isObject(values[0])){\n\t\t\toptions = values[0];\n\t\t} else {\n\t\t\tfor (var i = 0; i < keys.length; i++){\n\t\t\t\toptions[keys[i]] = values[i];\n\t\t\t}\n\t\t}\n\t\tif (Tone.isDefined(constr.defaults)){\n\t\t\treturn Tone.defaultArg(options, constr.defaults);\n\t\t} else if (Tone.isObject(constr)){\n\t\t\treturn Tone.defaultArg(options, constr);\n\t\t} else {\n\t\t\treturn options;\n\t\t}\n\t};\n\n\t/**\n\t *  If the `given` parameter is undefined, use the `fallback`.\n\t *  If both `given` and `fallback` are object literals, it will\n\t *  return a deep copy which includes all of the parameters from both\n\t *  objects. If a parameter is undefined in given, it will return\n\t *  the fallback property.\n\t *  <br><br>\n\t *  WARNING: if object is self referential, it will go into an an\n\t *  infinite recursive loop.\n\t *  @memberOf Tone\n\t *  @param  {*} given\n\t *  @param  {*} fallback\n\t *  @return {*}\n\t */\n\tTone.defaultArg = function(given, fallback){\n\t\tif (Tone.isObject(given) && Tone.isObject(fallback)){\n\t\t\tvar ret = {};\n\t\t\t//make a deep copy of the given object\n\t\t\tfor (var givenProp in given){\n\t\t\t\tret[givenProp] = Tone.defaultArg(fallback[givenProp], given[givenProp]);\n\t\t\t}\n\t\t\tfor (var fallbackProp in fallback){\n\t\t\t\tret[fallbackProp] = Tone.defaultArg(given[fallbackProp], fallback[fallbackProp]);\n\t\t\t}\n\t\t\treturn ret;\n\t\t} else {\n\t\t\treturn Tone.isUndef(given) ? fallback : given;\n\t\t}\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////\n\t//\tDEBUGGING\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Print the outputs to the console log for debugging purposes. \n\t *  Prints the contents only if either the object has a property\n\t *  called `debug` set to true, or a variable called TONE_DEBUG_CLASS\n\t *  is set to the name of the class. \n\t *  @example\n\t * //prints all logs originating from Tone.OscillatorNode\n\t * Tone.global.TONE_DEBUG_CLASS = \"OscillatorNode\"\n\t *  @param {*} args Any arguments to print to the console.\n\t *  @private\n\t */\n\tTone.prototype.log = function(){\n\t\t//if the object is either set to debug = true\n\t\t//or if there is a string on the Tone.global.with the class name\n\t\tif (this.debug || this.toString() === Tone.global.TONE_DEBUG_CLASS){\n\t\t\tvar args = Array.from(arguments);\n\t\t\targs.unshift(this.toString()+\":\");\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.log.apply(undefined, args);\n\t\t}\n\t};\n\n\t/**\n\t *  Assert that the statement is true, otherwise invoke the error. \n\t *  @param {Boolean} statement\n\t *  @param {String} error The message which is passed into an Error\n\t *  @private\n\t */\n\tTone.prototype.assert = function(statement, error){\n\t\tif (!statement){\n\t\t\tthrow new Error(error);\n\t\t}\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////\n\t//\tCONNECTIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  connect together all of the arguments in series\n\t *  @param {...AudioParam|Tone|AudioNode} nodes\n\t *  @returns {Tone}\n\t *  @memberOf Tone\n\t *  @static\n\t */\n\tTone.connectSeries = function(){\n\t\tvar currentUnit = arguments[0];\n\t\tfor (var i = 1; i < arguments.length; i++){\n\t\t\tvar toUnit = arguments[i];\n\t\t\tcurrentUnit.connect(toUnit);\n\t\t\tcurrentUnit = toUnit;\n\t\t}\n\t\treturn Tone;\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// TYPE CHECKING\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Test if the arg is undefined\n\t *  @param {*} arg the argument to test\n\t *  @returns {Boolean} true if the arg is undefined\n\t *  @static\n\t *  @memberOf Tone\n\t */\n\tTone.isUndef = function(val){\n\t\treturn typeof val === \"undefined\";\n\t};\n\n\t/**\n\t *  Test if the arg is not undefined\n\t *  @param {*} arg the argument to test\n\t *  @returns {Boolean} true if the arg is undefined\n\t *  @static\n\t *  @memberOf Tone\n\t */\n\tTone.isDefined = function(val){\n\t\treturn !Tone.isUndef(val);\n\t};\n\n\t/**\n\t *  Test if the arg is a function\n\t *  @param {*} arg the argument to test\n\t *  @returns {Boolean} true if the arg is a function\n\t *  @static\n\t *  @memberOf Tone\n\t */\n\tTone.isFunction = function(val){\n\t\treturn typeof val === \"function\";\n\t};\n\n\t/**\n\t *  Test if the argument is a number.\n\t *  @param {*} arg the argument to test\n\t *  @returns {Boolean} true if the arg is a number\n\t *  @static\n\t *  @memberOf Tone\n\t */\n\tTone.isNumber = function(arg){\n\t\treturn (typeof arg === \"number\");\n\t};\n\n\t/**\n\t *  Test if the given argument is an object literal (i.e. `{}`);\n\t *  @param {*} arg the argument to test\n\t *  @returns {Boolean} true if the arg is an object literal.\n\t *  @static\n\t *  @memberOf Tone\n\t */\n\tTone.isObject = function(arg){\n\t\treturn (Object.prototype.toString.call(arg) === \"[object Object]\" && arg.constructor === Object);\n\t};\n\n\t/**\n\t *  Test if the argument is a boolean.\n\t *  @param {*} arg the argument to test\n\t *  @returns {Boolean} true if the arg is a boolean\n\t *  @static\n\t *  @memberOf Tone\n\t */\n\tTone.isBoolean = function(arg){\n\t\treturn (typeof arg === \"boolean\");\n\t};\n\n\t/**\n\t *  Test if the argument is an Array\n\t *  @param {*} arg the argument to test\n\t *  @returns {Boolean} true if the arg is an array\n\t *  @static\n\t *  @memberOf Tone\n\t */\n\tTone.isArray = function(arg){\n\t\treturn (Array.isArray(arg));\n\t};\n\n\t/**\n\t *  Test if the argument is a string.\n\t *  @param {*} arg the argument to test\n\t *  @returns {Boolean} true if the arg is a string\n\t *  @static\n\t *  @memberOf Tone\n\t */\n\tTone.isString = function(arg){\n\t\treturn (typeof arg === \"string\");\n\t};\n\n\t/**\n\t *  Test if the argument is in the form of a note in scientific pitch notation.\n\t *  e.g. \"C4\"\n\t *  @param {*} arg the argument to test\n\t *  @returns {Boolean} true if the arg is a string\n\t *  @static\n\t *  @memberOf Tone\n\t */\n\tTone.isNote = function(arg){\n\t\treturn Tone.isString(arg) && /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i.test(arg);\n\t};\n\n\t/**\n\t *  An empty function.\n\t *  @static\n\t */\n\tTone.noOp = function(){};\n\n\t/**\n\t *  Make the property not writable. Internal use only.\n\t *  @private\n\t *  @param  {String}  property  the property to make not writable\n\t */\n\tTone.prototype._readOnly = function(property){\n\t\tif (Array.isArray(property)){\n\t\t\tfor (var i = 0; i < property.length; i++){\n\t\t\t\tthis._readOnly(property[i]);\n\t\t\t}\n\t\t} else {\n\t\t\tObject.defineProperty(this, property, {\n\t\t\t\t\"writable\" : false,\n\t\t\t\t\"enumerable\" : true,\n\t\t\t});\n\t\t}\n\t};\n\n\t/**\n\t *  Make an attribute writeable. Interal use only.\n\t *  @private\n\t *  @param  {String}  property  the property to make writable\n\t */\n\tTone.prototype._writable = function(property){\n\t\tif (Array.isArray(property)){\n\t\t\tfor (var i = 0; i < property.length; i++){\n\t\t\t\tthis._writable(property[i]);\n\t\t\t}\n\t\t} else {\n\t\t\tObject.defineProperty(this, property, {\n\t\t\t\t\"writable\" : true,\n\t\t\t});\n\t\t}\n\t};\n\n\t/**\n\t * Possible play states.\n\t * @enum {String}\n\t */\n\tTone.State = {\n\t\t\"Started\" : \"started\",\n\t\t\"Stopped\" : \"stopped\",\n\t\t\"Paused\" : \"paused\",\n\t};\n\n\t/**\n\t * A reference to the global context, `global` or `Tone.global.\n\t */\n\tTone.global = Tone.isUndef(global) ? window : global;\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// CONVERSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Equal power gain scale. Good for cross-fading.\n\t *  @param  {NormalRange} percent (0-1)\n\t *  @return {Number}         output gain (0-1)\n\t *  @static\n\t *  @memberOf Tone\n\t */\n\tTone.equalPowerScale = function(percent){\n\t\tvar piFactor = 0.5 * Math.PI;\n\t\treturn Math.sin(percent * piFactor);\n\t};\n\n\t/**\n\t *  Convert decibels into gain.\n\t *  @param  {Decibels} db\n\t *  @return {Number}\n\t *  @static\n\t *  @memberOf Tone\n\t */\n\tTone.dbToGain = function(db){\n\t\treturn Math.pow(10, db / 20);\n\t};\n\n\t/**\n\t *  Convert gain to decibels.\n\t *  @param  {Number} gain (0-1)\n\t *  @return {Decibels}\n\t *  @static\n\t *  @memberOf Tone\n\t */\n\tTone.gainToDb = function(gain){\n\t\treturn 20 * (Math.log(gain) / Math.LN10);\n\t};\n\n\t/**\n\t *  Convert an interval (in semitones) to a frequency ratio.\n\t *  @param  {Interval} interval the number of semitones above the base note\n\t *  @return {Number}          the frequency ratio\n\t *  @static\n\t *  @memberOf Tone\n\t *  @example\n\t * tone.intervalToFrequencyRatio(0); // 1\n\t * tone.intervalToFrequencyRatio(12); // 2\n\t * tone.intervalToFrequencyRatio(-12); // 0.5\n\t */\n\tTone.intervalToFrequencyRatio = function(interval){\n\t\treturn Math.pow(2, (interval/12));\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////\n\t//\tTIMING\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Return the current time of the AudioContext clock plus\n\t *  the lookAhead.\n\t *  @return {Number} the currentTime from the AudioContext\n\t *  @memberOf Tone#\n\t */\n\tTone.prototype.now = function(){\n\t\treturn Tone.context.now();\n\t};\n\n\t/**\n\t *  Return the current time of the AudioContext clock plus\n\t *  the lookAhead.\n\t *  @return {Number} the currentTime from the AudioContext\n\t *  @static\n\t *  @memberOf Tone\n\t */\n\tTone.now = function(){\n\t\treturn Tone.context.now();\n\t};\n\n\t/**\n\t *  Return the current time of the AudioContext clock without\n\t *  any lookAhead.\n\t *  @return {Number} the currentTime from the AudioContext\n\t *  @memberOf Tone#\n\t */\n\tTone.prototype.immediate = function(){\n\t\treturn Tone.context.currentTime;\n\t};\n\n\t/**\n\t *  Return the current time of the AudioContext clock without\n\t *  any lookAhead.\n\t *  @return {Number} the currentTime from the AudioContext\n\t *  @memberOf Tone\n\t */\n\tTone.immediate = function(){\n\t\treturn Tone.context.currentTime;\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////\n\t//\tINHERITANCE\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  have a child inherit all of Tone's (or a parent's) prototype\n\t *  to inherit the parent's properties, make sure to call\n\t *  Parent.call(this) in the child's constructor\n\t *\n\t *  based on closure library's inherit function\n\t *\n\t *  @memberOf Tone\n\t *  @static\n\t *  @param  {Function} \tchild\n\t *  @param  {Function=} parent (optional) parent to inherit from\n\t *                             if no parent is supplied, the child\n\t *                             will inherit from Tone\n\t */\n\tTone.extend = function(child, parent){\n\t\tif (Tone.isUndef(parent)){\n\t\t\tparent = Tone;\n\t\t}\n\t\tfunction TempConstructor(){}\n\t\tTempConstructor.prototype = parent.prototype;\n\t\tchild.prototype = new TempConstructor();\n\t\t/** @override */\n\t\tchild.prototype.constructor = child;\n\t\tchild._super = parent;\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////\n\t//\tCONTEXT\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * The shared AudioContext\n\t * @type {Tone.Context}\n\t * @private\n\t */\n\tTone._audioContext = null;\n\n\t/**\n\t *  A static pointer to the audio context accessible as Tone.context.\n\t *  @type {Tone.Context}\n\t *  @name context\n\t *  @memberOf Tone\n\t */\n\tObject.defineProperty(Tone, \"context\", {\n\t\t\"get\" : function(){\n\t\t\treturn Tone._audioContext;\n\t\t},\n\t\t\"set\" : function(context){\n\t\t\tif (context.isContext){\n\t\t\t\tTone._audioContext = context;\n\t\t\t} else {\n\t\t\t\tTone._audioContext = new Tone.Context(context);\n\t\t\t}\n\t\t\t//initialize the new audio context\n\t\t\tTone.Context.emit(\"init\", Tone._audioContext);\n\t\t}\n\t});\n\n\t/**\n\t *  The AudioContext\n\t *  @type {Tone.Context}\n\t *  @name context\n\t *  @memberOf Tone#\n\t *  @readOnly\n\t */\n\tObject.defineProperty(Tone.prototype, \"context\", {\n\t\t\"get\" : function(){\n\t\t\treturn Tone.context;\n\t\t}\n\t});\n\n\t/**\n\t *  Tone automatically creates a context on init, but if you are working\n\t *  with other libraries which also create an AudioContext, it can be\n\t *  useful to set your own. If you are going to set your own context,\n\t *  be sure to do it at the start of your code, before creating any objects.\n\t *  @static\n\t *  @param {AudioContext} ctx The new audio context to set\n\t */\n\tTone.setContext = function(ctx){\n\t\tTone.context = ctx;\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////\n\t//\tATTRIBUTES\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  The number of seconds of 1 processing block (128 samples)\n\t *  @type {Number}\n\t *  @name blockTime\n\t *  @memberOf Tone\n\t *  @static\n\t *  @readOnly\n\t */\n\tObject.defineProperty(Tone.prototype, \"blockTime\", {\n\t\t\"get\" : function(){\n\t\t\treturn 128 / this.context.sampleRate;\n\t\t}\n\t});\n\n\t/**\n\t *  The duration in seconds of one sample.\n\t *  @type {Number}\n\t *  @name sampleTime\n\t *  @memberOf Tone\n\t *  @static\n\t *  @readOnly\n\t */\n\tObject.defineProperty(Tone.prototype, \"sampleTime\", {\n\t\t\"get\" : function(){\n\t\t\treturn 1 / this.context.sampleRate;\n\t\t}\n\t});\n\n\t/**\n\t *  Whether or not all the technologies that Tone.js relies on are supported by the current browser.\n\t *  @type {Boolean}\n\t *  @name supported\n\t *  @memberOf Tone\n\t *  @readOnly\n\t *  @static\n\t */\n\tObject.defineProperty(Tone, \"supported\", {\n\t\t\"get\" : function(){\n\t\t\tvar hasAudioContext = Tone.global.hasOwnProperty(\"AudioContext\") || Tone.global.hasOwnProperty(\"webkitAudioContext\");\n\t\t\tvar hasPromises = Tone.global.hasOwnProperty(\"Promise\");\n\t\t\treturn hasAudioContext && hasPromises;\n\t\t}\n\t});\n\n\t/**\n\t *  Boolean value if the audio context has been initialized.\n\t *  @type {Boolean}\n\t *  @memberOf Tone\n\t *  @static\n\t *  @name initialized\n\t *  @readOnly\n\t */\n\tObject.defineProperty(Tone, \"initialized\", {\n\t\t\"get\" : function(){\n\t\t\treturn Boolean(Tone.context);\n\t\t}\n\t});\n\n\t/**\n\t *  Get the context when it becomes available\n\t *  @param  {Function}  resolve  Callback when the context is initialized\n\t *  @return  {Tone}\n\t */\n\tTone.getContext = function(resolve){\n\t\tif (Tone.initialized){\n\t\t\tresolve(Tone.context);\n\t\t} else {\n\t\t\tvar resCallback = function(){\n\t\t\t\tresolve(Tone.context);\n\t\t\t\tTone.Context.off(\"init\", resCallback);\n\t\t\t};\n\t\t\tTone.Context.on(\"init\", resCallback);\n\t\t}\n\t\treturn Tone;\n\t};\n\n\t/**\n\t * The version number\n\t * @type {String}\n\t * @static\n\t */\n\tTone.version = version;\n\n\treturn Tone;\n});\n","define([\"../core/Tone\", \"../core/Emitter\", \"../core/Timeline\", \"../shim/AudioContext\"], function(Tone){\n\n\t/**\n\t *  @class Wrapper around the native AudioContext.\n\t *  @extends {Tone.Emitter}\n\t *  @param {AudioContext=} context optionally pass in a context\n\t */\n\tTone.Context = function(){\n\n\t\tTone.Emitter.call(this);\n\n\t\tvar options = Tone.defaults(arguments, [\"context\"], Tone.Context);\n\n\t\tif (!options.context){\n\t\t\toptions.context = new Tone.global.AudioContext();\n\t\t\tif (!options.context){\n\t\t\t\tthrow new Error(\"could not create AudioContext. Possibly too many AudioContexts running already.\");\n\t\t\t}\n\t\t}\n\t\tthis._context = options.context;\n\t\t//make sure it's not an AudioContext wrapper\n\t\twhile (this._context.rawContext){\n\t\t\tthis._context = this._context.rawContext;\n\t\t}\n\t\t// extend all of the methods\n\t\tfor (var prop in this._context){\n\t\t\tthis._defineProperty(this._context, prop);\n\t\t}\n\n\t\t/**\n\t\t *  The default latency hint\n\t\t *  @type  {String}\n\t\t *  @private\n\t\t */\n\t\tthis._latencyHint = options.latencyHint;\n\n\t\t/**\n\t\t *  An object containing all of the constants AudioBufferSourceNodes\n\t\t *  @type  {Object}\n\t\t *  @private\n\t\t */\n\t\tthis._constants = {};\n\n\t\t///////////////////////////////////////////////////////////////////////\n\t\t// WORKER\n\t\t///////////////////////////////////////////////////////////////////////\n\n\t\t/**\n\t\t *  The amount of time events are scheduled\n\t\t *  into the future\n\t\t *  @type  {Number}\n\t\t */\n\t\tthis.lookAhead = options.lookAhead;\n\n\t\t/**\n\t\t *  A reference to the actual computed update interval\n\t\t *  @type  {Number}\n\t\t *  @private\n\t\t */\n\t\tthis._computedUpdateInterval = 0;\n\n\t\t/**\n\t\t *  A reliable callback method\n\t\t *  @private\n\t\t *  @type  {Ticker}\n\t\t */\n\t\tthis._ticker = new Ticker(this.emit.bind(this, \"tick\"), options.clockSource, options.updateInterval);\n\n\t\t///////////////////////////////////////////////////////////////////////\n\t\t// TIMEOUTS\n\t\t///////////////////////////////////////////////////////////////////////\n\n\t\t/**\n\t\t *  All of the setTimeout events.\n\t\t *  @type  {Tone.Timeline}\n\t\t *  @private\n\t\t */\n\t\tthis._timeouts = new Tone.Timeline();\n\n\t\t/**\n\t\t *  The timeout id counter\n\t\t *  @private\n\t\t *  @type {Number}\n\t\t */\n\t\tthis._timeoutIds = 0;\n\n\t\tthis.on(\"tick\", this._timeoutLoop.bind(this));\n\n\t\t//forward state change events\n\t\tthis._context.onstatechange = function(e){\n\t\t\tthis.emit(\"statechange\", e);\n\t\t}.bind(this);\n\t};\n\n\tTone.extend(Tone.Context, Tone.Emitter);\n\tTone.Emitter.mixin(Tone.Context);\n\n\t/**\n\t * defaults\n\t * @static\n\t * @type {Object}\n\t */\n\tTone.Context.defaults = {\n\t\t\"clockSource\" : \"worker\",\n\t\t\"latencyHint\" : \"interactive\",\n\t\t\"lookAhead\" : 0.1,\n\t\t\"updateInterval\" : 0.03\n\t};\n\n\t/**\n\t * Is an instanceof Tone.Context\n\t * @type {Boolean}\n\t */\n\tTone.Context.prototype.isContext = true;\n\n\t/**\n\t *  Define a property on this Tone.Context.\n\t *  This is used to extend the native AudioContext\n\t *  @param  {AudioContext}  context\n\t *  @param  {String}  prop\n\t *  @private\n\t */\n\tTone.Context.prototype._defineProperty = function(context, prop){\n\t\tif (Tone.isUndef(this[prop])){\n\t\t\tObject.defineProperty(this, prop, {\n\t\t\t\t\"get\" : function(){\n\t\t\t\t\tif (typeof context[prop] === \"function\"){\n\t\t\t\t\t\treturn context[prop].bind(context);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn context[prop];\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"set\" : function(val){\n\t\t\t\t\tcontext[prop] = val;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n\n\t/**\n\t *  The current audio context time\n\t *  @return  {Number}\n\t */\n\tTone.Context.prototype.now = function(){\n\t\treturn this._context.currentTime + this.lookAhead;\n\t};\n\n\t/**\n\t *  The audio output destination. Alias for Tone.Master\n\t *  @readyOnly\n\t *  @type  {Tone.Master}\n\t */\n\tObject.defineProperty(Tone.Context.prototype, \"destination\", {\n\t\t\"get\" : function(){\n\t\t\tif (!this.master){\n\t\t\t\treturn this._context.destination;\n\t\t\t} else {\n\t\t\t\treturn this.master;\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t *  Starts the audio context from a suspended state. This is required\n\t *  to initially start the AudioContext.\n\t *  @return  {Promise}\n\t */\n\tTone.Context.prototype.resume = function(){\n\t\tif (this._context.state === \"suspended\" && this._context instanceof AudioContext){\n\t\t\treturn this._context.resume();\n\t\t} else {\n\t\t\treturn Promise.resolve();\n\t\t}\n\t};\n\n\t/**\n\t *  Promise which is invoked when the context is running.\n\t *  Tries to resume the context if it's not started.\n\t *  @return  {Promise}\n\t */\n\tTone.Context.prototype.close = function(){\n\t\tvar closePromise = Promise.resolve();\n\t\t//never close the global Tone.Context\n\t\tif (this !== Tone.global.TONE_AUDIO_CONTEXT){\n\t\t\tclosePromise = this.rawContext.close();\n\t\t}\n\t\treturn closePromise.then(function(){\n\t\t\tTone.Context.emit(\"close\", this);\n\t\t}.bind(this));\n\t};\n\n\t/**\n\t *  Generate a looped buffer at some constant value.\n\t *  @param  {Number}  val\n\t *  @return  {BufferSourceNode}\n\t */\n\tTone.Context.prototype.getConstant = function(val){\n\t\tif (this._constants[val]){\n\t\t\treturn this._constants[val];\n\t\t} else {\n\t\t\tvar buffer = this._context.createBuffer(1, 128, this._context.sampleRate);\n\t\t\tvar arr = buffer.getChannelData(0);\n\t\t\tfor (var i = 0; i < arr.length; i++){\n\t\t\t\tarr[i] = val;\n\t\t\t}\n\t\t\tvar constant = this._context.createBufferSource();\n\t\t\tconstant.channelCount = 1;\n\t\t\tconstant.channelCountMode = \"explicit\";\n\t\t\tconstant.buffer = buffer;\n\t\t\tconstant.loop = true;\n\t\t\tconstant.start(0);\n\t\t\tthis._constants[val] = constant;\n\t\t\treturn constant;\n\t\t}\n\t};\n\n\t/**\n\t *  The private loop which keeps track of the context scheduled timeouts\n\t *  Is invoked from the clock source\n\t *  @private\n\t */\n\tTone.Context.prototype._timeoutLoop = function(){\n\t\tvar now = this.now();\n\t\twhile (this._timeouts && this._timeouts.length && this._timeouts.peek().time <= now){\n\t\t\tthis._timeouts.shift().callback();\n\t\t}\n\t};\n\n\t/**\n\t *  A setTimeout which is gaurenteed by the clock source.\n\t *  Also runs in the offline context.\n\t *  @param  {Function}  fn       The callback to invoke\n\t *  @param  {Seconds}    timeout  The timeout in seconds\n\t *  @returns {Number} ID to use when invoking Tone.Context.clearTimeout\n\t */\n\tTone.Context.prototype.setTimeout = function(fn, timeout){\n\t\tthis._timeoutIds++;\n\t\tvar now = this.now();\n\t\tthis._timeouts.add({\n\t\t\t\"callback\" : fn,\n\t\t\t\"time\" : now + timeout,\n\t\t\t\"id\" : this._timeoutIds\n\t\t});\n\t\treturn this._timeoutIds;\n\t};\n\n\t/**\n\t *  Clears a previously scheduled timeout with Tone.context.setTimeout\n\t *  @param  {Number}  id  The ID returned from setTimeout\n\t *  @return  {Tone.Context}  this\n\t */\n\tTone.Context.prototype.clearTimeout = function(id){\n\t\tthis._timeouts.forEach(function(event){\n\t\t\tif (event.id === id){\n\t\t\t\tthis.remove(event);\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t};\n\n\t/**\n\t *  How often the Web Worker callback is invoked.\n\t *  This number corresponds to how responsive the scheduling\n\t *  can be. Context.updateInterval + Context.lookAhead gives you the\n\t *  total latency between scheduling an event and hearing it.\n\t *  @type {Number}\n\t *  @memberOf Tone.Context#\n\t *  @name updateInterval\n\t */\n\tObject.defineProperty(Tone.Context.prototype, \"updateInterval\", {\n\t\t\"get\" : function(){\n\t\t\treturn this._ticker.updateInterval;\n\t\t},\n\t\t\"set\" : function(interval){\n\t\t\tthis._ticker.updateInterval = interval;\n\t\t}\n\t});\n\n\t/**\n\t *  The unwrapped AudioContext.\n\t *  @type {AudioContext}\n\t *  @memberOf Tone.Context#\n\t *  @name rawContext\n\t *  @readOnly\n\t */\n\tObject.defineProperty(Tone.Context.prototype, \"rawContext\", {\n\t\t\"get\" : function(){\n\t\t\treturn this._context;\n\t\t}\n\t});\n\n\t/**\n\t *  What the source of the clock is, either \"worker\" (Web Worker [default]),\n\t *  \"timeout\" (setTimeout), or \"offline\" (none).\n\t *  @type {String}\n\t *  @memberOf Tone.Context#\n\t *  @name clockSource\n\t */\n\tObject.defineProperty(Tone.Context.prototype, \"clockSource\", {\n\t\t\"get\" : function(){\n\t\t\treturn this._ticker.type;\n\t\t},\n\t\t\"set\" : function(type){\n\t\t\tthis._ticker.type = type;\n\t\t}\n\t});\n\n\t/**\n\t *  The type of playback, which affects tradeoffs between audio\n\t *  output latency and responsiveness.\n\t *\n\t *  In addition to setting the value in seconds, the latencyHint also\n\t *  accepts the strings \"interactive\" (prioritizes low latency),\n\t *  \"playback\" (prioritizes sustained playback), \"balanced\" (balances\n\t *  latency and performance), and \"fastest\" (lowest latency, might glitch more often).\n\t *  @type {String|Seconds}\n\t *  @memberOf Tone.Context#\n\t *  @name latencyHint\n\t *  @example\n\t * //set the lookAhead to 0.3 seconds\n\t * Tone.context.latencyHint = 0.3;\n\t */\n\tObject.defineProperty(Tone.Context.prototype, \"latencyHint\", {\n\t\t\"get\" : function(){\n\t\t\treturn this._latencyHint;\n\t\t},\n\t\t\"set\" : function(hint){\n\t\t\tvar lookAhead = hint;\n\t\t\tthis._latencyHint = hint;\n\t\t\tif (Tone.isString(hint)){\n\t\t\t\tswitch (hint){\n\t\t\t\t\tcase \"interactive\" :\n\t\t\t\t\t\tlookAhead = 0.1;\n\t\t\t\t\t\tthis._context.latencyHint = hint;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"playback\" :\n\t\t\t\t\t\tlookAhead = 0.8;\n\t\t\t\t\t\tthis._context.latencyHint = hint;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"balanced\" :\n\t\t\t\t\t\tlookAhead = 0.25;\n\t\t\t\t\t\tthis._context.latencyHint = hint;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"fastest\" :\n\t\t\t\t\t\tthis._context.latencyHint = \"interactive\";\n\t\t\t\t\t\tlookAhead = 0.01;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.lookAhead = lookAhead;\n\t\t\tthis.updateInterval = lookAhead/3;\n\t\t}\n\t});\n\n\t/**\n\t *  Unlike other dispose methods, this returns a Promise\n\t *  which executes when the context is closed and disposed\n\t *  @returns {Promise} this\n\t */\n\tTone.Context.prototype.dispose = function(){\n\t\treturn this.close().then(function(){\n\t\t\tTone.Emitter.prototype.dispose.call(this);\n\t\t\tthis._ticker.dispose();\n\t\t\tthis._ticker = null;\n\t\t\tthis._timeouts.dispose();\n\t\t\tthis._timeouts = null;\n\t\t\tfor (var con in this._constants){\n\t\t\t\tthis._constants[con].disconnect();\n\t\t\t}\n\t\t\tthis._constants = null;\n\t\t}.bind(this));\n\t};\n\n\t/**\n\t * @class A class which provides a reliable callback using either\n\t *        a Web Worker, or if that isn't supported, falls back to setTimeout.\n\t * @private\n\t */\n\tvar Ticker = function(callback, type, updateInterval){\n\n\t\t/**\n\t\t * Either \"worker\" or \"timeout\"\n\t\t * @type {String}\n\t\t * @private\n\t\t */\n\t\tthis._type = type;\n\n\t\t/**\n\t\t * The update interval of the worker\n\t\t * @private\n\t\t * @type {Number}\n\t\t */\n\t\tthis._updateInterval = updateInterval;\n\n\t\t/**\n\t\t * The callback to invoke at regular intervals\n\t\t * @type {Function}\n\t\t * @private\n\t\t */\n\t\tthis._callback = Tone.defaultArg(callback, Tone.noOp);\n\n\t\t//create the clock source for the first time\n\t\tthis._createClock();\n\t};\n\n\t/**\n\t * The possible ticker types\n\t * @private\n\t * @type {Object}\n\t */\n\tTicker.Type = {\n\t\t\"Worker\" : \"worker\",\n\t\t\"Timeout\" : \"timeout\",\n\t\t\"Offline\" : \"offline\"\n\t};\n\n\t/**\n\t *  Generate a web worker\n\t *  @return  {WebWorker}\n\t *  @private\n\t */\n\tTicker.prototype._createWorker = function(){\n\n\t\t//URL Shim\n\t\tTone.global.URL = Tone.global.URL || Tone.global.webkitURL;\n\n\t\tvar blob = new Blob([\n\t\t\t//the initial timeout time\n\t\t\t\"var timeoutTime = \"+(this._updateInterval * 1000).toFixed(1)+\";\" +\n\t\t\t//onmessage callback\n\t\t\t\"self.onmessage = function(msg){\" +\n\t\t\t\"\ttimeoutTime = parseInt(msg.data);\" +\n\t\t\t\"};\" +\n\t\t\t//the tick function which posts a message\n\t\t\t//and schedules a new tick\n\t\t\t\"function tick(){\" +\n\t\t\t\"\tsetTimeout(tick, timeoutTime);\" +\n\t\t\t\"\tself.postMessage('tick');\" +\n\t\t\t\"}\" +\n\t\t\t//call tick initially\n\t\t\t\"tick();\"\n\t\t]);\n\t\tvar blobUrl = URL.createObjectURL(blob);\n\t\tvar worker = new Worker(blobUrl);\n\n\t\tworker.onmessage = this._callback.bind(this);\n\n\t\tthis._worker = worker;\n\t};\n\n\t/**\n\t * Create a timeout loop\n\t * @private\n\t */\n\tTicker.prototype._createTimeout = function(){\n\t\tthis._timeout = setTimeout(function(){\n\t\t\tthis._createTimeout();\n\t\t\tthis._callback();\n\t\t}.bind(this), this._updateInterval * 1000);\n\t};\n\n\t/**\n\t * Create the clock source.\n\t * @private\n\t */\n\tTicker.prototype._createClock = function(){\n\t\tif (this._type === Ticker.Type.Worker){\n\t\t\ttry {\n\t\t\t\tthis._createWorker();\n\t\t\t} catch (e){\n\t\t\t\t// workers not supported, fallback to timeout\n\t\t\t\tthis._type = Ticker.Type.Timeout;\n\t\t\t\tthis._createClock();\n\t\t\t}\n\t\t} else if (this._type === Ticker.Type.Timeout){\n\t\t\tthis._createTimeout();\n\t\t}\n\t};\n\n\t/**\n\t * @memberOf Ticker#\n\t * @type {Number}\n\t * @name updateInterval\n\t * @private\n\t */\n\tObject.defineProperty(Ticker.prototype, \"updateInterval\", {\n\t\t\"get\" : function(){\n\t\t\treturn this._updateInterval;\n\t\t},\n\t\t\"set\" : function(interval){\n\t\t\tthis._updateInterval = Math.max(interval, 128/44100);\n\t\t\tif (this._type === Ticker.Type.Worker){\n\t\t\t\tthis._worker.postMessage(Math.max(interval * 1000, 1));\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t * The type of the ticker, either a worker or a timeout\n\t * @memberOf Ticker#\n\t * @type {Number}\n\t * @name type\n\t * @private\n\t */\n\tObject.defineProperty(Ticker.prototype, \"type\", {\n\t\t\"get\" : function(){\n\t\t\treturn this._type;\n\t\t},\n\t\t\"set\" : function(type){\n\t\t\tthis._disposeClock();\n\t\t\tthis._type = type;\n\t\t\tthis._createClock();\n\t\t}\n\t});\n\n\t/**\n\t * Clean up the current clock source\n\t * @private\n\t */\n\tTicker.prototype._disposeClock = function(){\n\t\tif (this._timeout){\n\t\t\tclearTimeout(this._timeout);\n\t\t\tthis._timeout = null;\n\t\t}\n\t\tif (this._worker){\n\t\t\tthis._worker.terminate();\n\t\t\tthis._worker.onmessage = null;\n\t\t\tthis._worker = null;\n\t\t}\n\t};\n\n\t/**\n\t * Clean up\n\t * @private\n\t */\n\tTicker.prototype.dispose = function(){\n\t\tthis._disposeClock();\n\t\tthis._callback = null;\n\t};\n\n\t/**\n\t *  Adds connect/disconnect methods\n\t *  @private\n\t */\n\tTone.getContext(function(){\n\n\t\tvar nativeConnect = AudioNode.prototype.connect;\n\t\tvar nativeDisconnect = AudioNode.prototype.disconnect;\n\n\t\t//replace the old connect method\n\t\tfunction toneConnect(B, outNum, inNum){\n\t\t\tif (B.input){\n\t\t\t\tinNum = Tone.defaultArg(inNum, 0);\n\t\t\t\tif (Tone.isArray(B.input)){\n\t\t\t\t\treturn this.connect(B.input[inNum]);\n\t\t\t\t} else {\n\t\t\t\t\treturn this.connect(B.input, outNum, inNum);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tif (B instanceof AudioNode){\n\t\t\t\t\t\tnativeConnect.call(this, B, outNum, inNum);\n\t\t\t\t\t\treturn B;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnativeConnect.call(this, B, outNum);\n\t\t\t\t\t\treturn B;\n\t\t\t\t\t}\n\t\t\t\t} catch (e){\n\t\t\t\t\tthrow new Error(\"error connecting to node: \"+B+\"\\n\"+e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t//replace the old disconnect method\n\t\tfunction toneDisconnect(B, outNum, inNum){\n\t\t\tif (B && B.input && Tone.isArray(B.input)){\n\t\t\t\tinNum = Tone.defaultArg(inNum, 0);\n\t\t\t\tthis.disconnect(B.input[inNum], outNum, 0);\n\t\t\t} else if (B && B.input){\n\t\t\t\tthis.disconnect(B.input, outNum, inNum);\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tif (B instanceof AudioParam){\n\t\t\t\t\t\tnativeDisconnect.call(this, B, outNum);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnativeDisconnect.apply(this, arguments);\n\t\t\t\t\t}\n\t\t\t\t} catch (e){\n\t\t\t\t\tthrow new Error(\"error disconnecting node: \"+B+\"\\n\"+e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (AudioNode.prototype.connect !== toneConnect){\n\t\t\tAudioNode.prototype.connect = toneConnect;\n\t\t\tAudioNode.prototype.disconnect = toneDisconnect;\n\t\t}\n\t});\n\n\t// set the audio context initially, and if one is not already created\n\tif (Tone.supported && !Tone.initialized){\t\t\t\n\t\tif (!Tone.global.TONE_AUDIO_CONTEXT){\n\t\t\tTone.global.TONE_AUDIO_CONTEXT = new Tone.Context();\n\t\t}\n\t\tTone.context = Tone.global.TONE_AUDIO_CONTEXT;\n\n\t\t// log on first initialization\n\t\t// allow optional silencing of this log\n\t\tif (!Tone.global.TONE_SILENCE_VERSION_LOGGING){\n\t\t\tvar prefix = \"v\";\n\t\t\tif (Tone.version === \"dev\"){\n\t\t\t\tprefix = \"\";\n\t\t\t}\n\t\t\tvar printString = \" * Tone.js \" + prefix + Tone.version + \" * \"; \n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.log(\"%c\" + printString, \"background: #000; color: #fff\");\n\t\t}\n\t} else if (!Tone.supported){\n\t\t// eslint-disable-next-line no-console\n\t\tconsole.warn(\"This browser does not support Tone.js\");\n\t}\n\n\treturn Tone.Context;\n});\n","define([\"../core/Tone\", \"../core/Context\"], function(Tone){\n\n\t/**\n\t *  @class Tone.AudioNode is the base class for classes which process audio.\n\t *         AudioNodes have inputs and outputs.\n\t *  @param\t{AudioContext=} context\tThe audio context to use with the class\n\t *  @extends {Tone}\n\t */\n\tTone.AudioNode = function(){\n\t\tTone.call(this);\n\n\t\t//use the default context if one is not passed in\n\t\tvar options = Tone.defaults(arguments, [\"context\"], {\n\t\t\t\"context\" : Tone.context\n\t\t});\n\n\t\t/**\n\t\t * The AudioContext of this instance\n\t\t * @private\n\t\t * @type {AudioContext}\n\t\t */\n\t\tthis._context = options.context;\n\t};\n\n\tTone.extend(Tone.AudioNode);\n\n\t/**\n\t * Get the audio context belonging to this instance.\n\t * @type {Tone.Context}\n\t * @memberOf Tone.AudioNode#\n\t * @name context\n\t * @readOnly\n\t */\n\tObject.defineProperty(Tone.AudioNode.prototype, \"context\", {\n\t\tget : function(){\n\t\t\treturn this._context;\n\t\t}\n\t});\n\n\t/**\n\t *  Create input and outputs for this object.\n\t *  @param  {Number}  [input=0]   The number of inputs\n\t *  @param  {Number}  [outputs=0]  The number of outputs\n\t *  @return  {Tone.AudioNode}  this\n\t *  @private\n\t */\n\tTone.AudioNode.prototype.createInsOuts = function(inputs, outputs){\n\n\t\tif (inputs === 1){\n\t\t\tthis.input = this.context.createGain();\n\t\t} else if (inputs > 1){\n\t\t\tthis.input = new Array(inputs);\n\t\t}\n\n\t\tif (outputs === 1){\n\t\t\tthis.output = this.context.createGain();\n\t\t} else if (outputs > 1){\n\t\t\tthis.output = new Array(outputs);\n\t\t}\n\t};\n\n\t/**\n\t *  channelCount is the number of channels used when up-mixing and down-mixing\n\t *  connections to any inputs to the node. The default value is 2 except for\n\t *  specific nodes where its value is specially determined.\n\t *\n\t *  @memberof Tone.AudioNode#\n\t *  @type {Number}\n\t *  @name channelCount\n\t *  @readOnly\n\t */\n\tObject.defineProperty(Tone.AudioNode.prototype, \"channelCount\", {\n\t\tget : function(){\n\t\t\treturn this.output.channelCount;\n\t\t},\n\t\tset : function(c){\n\t\t\treturn this.output.channelCount = c;\n\t\t}\n\t});\n\n\t/**\n\t *  channelCountMode determines how channels will be counted when up-mixing and\n\t *  down-mixing connections to any inputs to the node.\n\t *  The default value is \"max\". This attribute has no effect for nodes with no inputs.\n\t *  @memberof Tone.AudioNode#\n\t *  @type {String}\n\t *  @name channelCountMode\n\t *  @readOnly\n\t */\n\tObject.defineProperty(Tone.AudioNode.prototype, \"channelCountMode\", {\n\t\tget : function(){\n\t\t\treturn this.output.channelCountMode;\n\t\t},\n\t\tset : function(m){\n\t\t\treturn this.output.channelCountMode = m;\n\t\t}\n\t});\n\n\t/**\n\t *  channelInterpretation determines how individual channels will be treated\n\t *  when up-mixing and down-mixing connections to any inputs to the node.\n\t *  The default value is \"speakers\".\n\t *  @memberof Tone.AudioNode#\n\t *  @type {String}\n\t *  @name channelInterpretation\n\t *  @readOnly\n\t */\n\tObject.defineProperty(Tone.AudioNode.prototype, \"channelInterpretation\", {\n\t\tget : function(){\n\t\t\treturn this.output.channelInterpretation;\n\t\t},\n\t\tset : function(i){\n\t\t\treturn this.output.channelInterpretation = i;\n\t\t}\n\t});\n\n\t/**\n\t *  The number of inputs feeding into the AudioNode.\n\t *  For source nodes, this will be 0.\n\t *  @type {Number}\n\t *  @name numberOfInputs\n\t *  @memberof Tone.AudioNode#\n\t *  @readOnly\n\t */\n\tObject.defineProperty(Tone.AudioNode.prototype, \"numberOfInputs\", {\n\t\tget : function(){\n\t\t\tif (this.input){\n\t\t\t\tif (Tone.isArray(this.input)){\n\t\t\t\t\treturn this.input.length;\n\t\t\t\t} else {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t *  The number of outputs coming out of the AudioNode.\n\t *  @type {Number}\n\t *  @name numberOfOutputs\n\t *  @memberof Tone.AudioNode#\n\t *  @readOnly\n\t */\n\tObject.defineProperty(Tone.AudioNode.prototype, \"numberOfOutputs\", {\n\t\tget : function(){\n\t\t\tif (this.output){\n\t\t\t\tif (Tone.isArray(this.output)){\n\t\t\t\t\treturn this.output.length;\n\t\t\t\t} else {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t *  connect the output of a ToneNode to an AudioParam, AudioNode, or ToneNode\n\t *  @param  {Tone | AudioParam | AudioNode} unit\n\t *  @param {number} [outputNum=0] optionally which output to connect from\n\t *  @param {number} [inputNum=0] optionally which input to connect to\n\t *  @returns {Tone.AudioNode} this\n\t */\n\tTone.AudioNode.prototype.connect = function(unit, outputNum, inputNum){\n\t\tif (Tone.isArray(this.output)){\n\t\t\toutputNum = Tone.defaultArg(outputNum, 0);\n\t\t\tthis.output[outputNum].connect(unit, 0, inputNum);\n\t\t} else {\n\t\t\tthis.output.connect(unit, outputNum, inputNum);\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  disconnect the output\n\t *  @param {Number|AudioNode} output Either the output index to disconnect\n\t *                                   if the output is an array, or the\n\t *                                   node to disconnect from.\n\t *  @returns {Tone.AudioNode} this\n\t */\n\tTone.AudioNode.prototype.disconnect = function(destination, outputNum, inputNum){\n\t\tif (Tone.isArray(this.output)){\n\t\t\tif (Tone.isNumber(destination)){\n\t\t\t\tthis.output[destination].disconnect();\n\t\t\t} else {\n\t\t\t\toutputNum = Tone.defaultArg(outputNum, 0);\n\t\t\t\tthis.output[outputNum].disconnect(destination, 0, inputNum);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.output.disconnect.apply(this.output, arguments);\n\t\t}\n\t};\n\n\t/**\n\t *  Connect the output of this node to the rest of the nodes in series.\n\t *  @example\n\t *  //connect a node to an effect, panVol and then to the master output\n\t *  node.chain(effect, panVol, Tone.Master);\n\t *  @param {...AudioParam|Tone|AudioNode} nodes\n\t *  @returns {Tone.AudioNode} this\n\t */\n\tTone.AudioNode.prototype.chain = function(){\n\t\tvar currentUnit = this;\n\t\tfor (var i = 0; i < arguments.length; i++){\n\t\t\tvar toUnit = arguments[i];\n\t\t\tcurrentUnit.connect(toUnit);\n\t\t\tcurrentUnit = toUnit;\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  connect the output of this node to the rest of the nodes in parallel.\n\t *  @param {...AudioParam|Tone|AudioNode} nodes\n\t *  @returns {Tone.AudioNode} this\n\t */\n\tTone.AudioNode.prototype.fan = function(){\n\t\tfor (var i = 0; i < arguments.length; i++){\n\t\t\tthis.connect(arguments[i]);\n\t\t}\n\t\treturn this;\n\t};\n\n\tif (Tone.global.AudioNode){\n\t\t//give native nodes chain and fan methods\n\t\tAudioNode.prototype.chain = Tone.AudioNode.prototype.chain;\n\t\tAudioNode.prototype.fan = Tone.AudioNode.prototype.fan;\n\t}\n\n\t/**\n\t * Dispose and disconnect\n\t * @return {Tone.AudioNode} this\n\t */\n\tTone.AudioNode.prototype.dispose = function(){\n\t\tif (Tone.isDefined(this.input)){\n\t\t\tif (this.input instanceof AudioNode){\n\t\t\t\tthis.input.disconnect();\n\t\t\t}\n\t\t\tthis.input = null;\n\t\t}\n\t\tif (Tone.isDefined(this.output)){\n\t\t\tif (this.output instanceof AudioNode){\n\t\t\t\tthis.output.disconnect();\n\t\t\t}\n\t\t\tthis.output = null;\n\t\t}\n\t\tthis._context = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.AudioNode;\n});\n","define([\"../core/Tone\", \"../core/Param\", \"../type/Type\", \"../core/AudioNode\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class A thin wrapper around the Native Web Audio GainNode.\n\t *         The GainNode is a basic building block of the Web Audio\n\t *         API and is useful for routing audio and adjusting gains.\n\t *  @extends {Tone.AudioNode}\n\t *  @param  {Number=}  gain  The initial gain of the GainNode\n\t *  @param {Tone.Type=} units The units of the gain parameter.\n\t */\n\tTone.Gain = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"gain\", \"units\"], Tone.Gain);\n\t\tTone.AudioNode.call(this, options);\n\n\t\t/**\n\t\t *  The GainNode\n\t\t *  @type  {GainNode}\n\t\t *  @private\n\t\t */\n\t\tthis.input = this.output = this._gainNode = this.context.createGain();\n\n\t\t/**\n\t\t *  The gain parameter of the gain node.\n\t\t *  @type {Gain}\n\t\t *  @signal\n\t\t */\n\t\tthis.gain = new Tone.Param({\n\t\t\t\"param\" : this._gainNode.gain,\n\t\t\t\"units\" : options.units,\n\t\t\t\"value\" : options.gain,\n\t\t\t\"convert\" : options.convert\n\t\t});\n\t\tthis._readOnly(\"gain\");\n\t};\n\n\tTone.extend(Tone.Gain, Tone.AudioNode);\n\n\t/**\n\t *  The defaults\n\t *  @const\n\t *  @type  {Object}\n\t */\n\tTone.Gain.defaults = {\n\t\t\"gain\" : 1,\n\t\t\"convert\" : true,\n\t};\n\n\t/**\n\t *  Clean up.\n\t *  @return  {Tone.Gain}  this\n\t */\n\tTone.Gain.prototype.dispose = function(){\n\t\tTone.AudioNode.prototype.dispose.call(this);\n\t\tthis._gainNode.disconnect();\n\t\tthis._gainNode = null;\n\t\tthis._writable(\"gain\");\n\t\tthis.gain.dispose();\n\t\tthis.gain = null;\n\t};\n\n\treturn Tone.Gain;\n});\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n","define([\"../core/Tone\", \"../type/Time\", \"../type/Frequency\", \"../type/TransportTime\", \"../core/Context\"], function(Tone){\n\n\t///////////////////////////////////////////////////////////////////////////\n\t//\tTYPES\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Units which a value can take on.\n\t * @enum {String}\n\t */\n\tTone.Type = {\n\t\t/**\n\t\t *  Default units\n\t\t *  @typedef {Default}\n\t\t */\n\t\tDefault : \"number\",\n\t\t/**\n\t\t *  Time can be described in a number of ways. Read more [Time](https://github.com/Tonejs/Tone.js/wiki/Time).\n\t\t *\n\t\t *  * Numbers, which will be taken literally as the time (in seconds).\n\t\t *  * Notation, (\"4n\", \"8t\") describes time in BPM and time signature relative values.\n\t\t *  * TransportTime, (\"4:3:2\") will also provide tempo and time signature relative times\n\t\t *  in the form BARS:QUARTERS:SIXTEENTHS.\n\t\t *  * Frequency, (\"8hz\") is converted to the length of the cycle in seconds.\n\t\t *  * Now-Relative, (\"+1\") prefix any of the above with \"+\" and it will be interpreted as\n\t\t *  \"the current time plus whatever expression follows\".\n\t\t *  * Object, ({\"4n\" : 3, \"8t\" : -1}). The resulting time is equal to the sum of all of the keys multiplied by the values in the object. \n\t\t *  * No Argument, for methods which accept time, no argument will be interpreted as\n\t\t *  \"now\" (i.e. the currentTime).\n\t\t *\n\t\t *  @typedef {Time}\n\t\t */\n\t\tTime : \"time\",\n\t\t/**\n\t\t *  Frequency can be described similar to time, except ultimately the\n\t\t *  values are converted to frequency instead of seconds. A number\n\t\t *  is taken literally as the value in hertz. Additionally any of the\n\t\t *  Time encodings can be used. Note names in the form\n\t\t *  of NOTE OCTAVE (i.e. C4) are also accepted and converted to their\n\t\t *  frequency value.\n\t\t *  @typedef {Frequency}\n\t\t */\n\t\tFrequency : \"frequency\",\n\t\t/**\n\t\t *  TransportTime describes a position along the Transport's timeline. It is\n\t\t *  similar to Time in that it uses all the same encodings, but TransportTime specifically\n\t\t *  pertains to the Transport's timeline, which is startable, stoppable, loopable, and seekable.\n\t\t *  [Read more](https://github.com/Tonejs/Tone.js/wiki/TransportTime)\n\t\t *  @typedef {TransportTime}\n\t\t */\n\t\tTransportTime : \"transportTime\",\n\t\t/**\n\t\t *  Ticks are the basic subunit of the Transport. They are\n\t\t *  the smallest unit of time that the Transport supports.\n\t\t *  @typedef {Ticks}\n\t\t */\n\t\tTicks : \"ticks\",\n\t\t/**\n\t\t *  Normal values are within the range [0, 1].\n\t\t *  @typedef {NormalRange}\n\t\t */\n\t\tNormalRange : \"normalRange\",\n\t\t/**\n\t\t *  AudioRange values are between [-1, 1].\n\t\t *  @typedef {AudioRange}\n\t\t */\n\t\tAudioRange : \"audioRange\",\n\t\t/**\n\t\t *  Decibels are a logarithmic unit of measurement which is useful for volume\n\t\t *  because of the logarithmic way that we perceive loudness. 0 decibels\n\t\t *  means no change in volume. -10db is approximately half as loud and 10db\n\t\t *  is twice is loud.\n\t\t *  @typedef {Decibels}\n\t\t */\n\t\tDecibels : \"db\",\n\t\t/**\n\t\t *  Half-step note increments, i.e. 12 is an octave above the root. and 1 is a half-step up.\n\t\t *  @typedef {Interval}\n\t\t */\n\t\tInterval : \"interval\",\n\t\t/**\n\t\t *  Beats per minute.\n\t\t *  @typedef {BPM}\n\t\t */\n\t\tBPM : \"bpm\",\n\t\t/**\n\t\t *  The value must be greater than or equal to 0.\n\t\t *  @typedef {Positive}\n\t\t */\n\t\tPositive : \"positive\",\n\t\t/**\n\t\t *  Gain is the ratio between input and output of a signal.\n\t\t *  A gain of 0 is the same as silencing the signal. A gain of\n\t\t *  1, causes no change to the incoming signal.\n\t\t *  @typedef {Gain}\n\t\t */\n\t\tGain : \"gain\",\n\t\t/**\n\t\t *  A cent is a hundredth of a semitone.\n\t\t *  @typedef {Cents}\n\t\t */\n\t\tCents : \"cents\",\n\t\t/**\n\t\t *  Angle between 0 and 360.\n\t\t *  @typedef {Degrees}\n\t\t */\n\t\tDegrees : \"degrees\",\n\t\t/**\n\t\t *  A number representing a midi note.\n\t\t *  @typedef {MIDI}\n\t\t */\n\t\tMIDI : \"midi\",\n\t\t/**\n\t\t *  A colon-separated representation of time in the form of\n\t\t *  Bars:Beats:Sixteenths.\n\t\t *  @typedef {BarsBeatsSixteenths}\n\t\t */\n\t\tBarsBeatsSixteenths : \"barsBeatsSixteenths\",\n\t\t/**\n\t\t *  Sampling is the reduction of a continuous signal to a discrete signal.\n\t\t *  Audio is typically sampled 44100 times per second.\n\t\t *  @typedef {Samples}\n\t\t */\n\t\tSamples : \"samples\",\n\t\t/**\n\t\t *  Hertz are a frequency representation defined as one cycle per second.\n\t\t *  @typedef {Hertz}\n\t\t */\n\t\tHertz : \"hertz\",\n\t\t/**\n\t\t *  A frequency represented by a letter name,\n\t\t *  accidental and octave. This system is known as\n\t\t *  [Scientific Pitch Notation](https://en.wikipedia.org/wiki/Scientific_pitch_notation).\n\t\t *  @typedef {Note}\n\t\t */\n\t\tNote : \"note\",\n\t\t/**\n\t\t *  One millisecond is a thousandth of a second.\n\t\t *  @typedef {Milliseconds}\n\t\t */\n\t\tMilliseconds : \"milliseconds\",\n\t\t/**\n\t\t *  Seconds are the time unit of the AudioContext. In the end,\n\t\t *  all values need to be evaluated to seconds.\n\t\t *  @typedef {Seconds}\n\t\t */\n\t\tSeconds : \"seconds\",\n\t\t/**\n\t\t *  A string representing a duration relative to a measure.\n\t\t *  * \"4n\" = quarter note\n\t\t *  * \"2m\" = two measures\n\t\t *  * \"8t\" = eighth-note triplet\n\t\t *  @typedef {Notation}\n\t\t */\n\t\tNotation : \"notation\",\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// AUGMENT TONE's PROTOTYPE\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Convert Time into seconds.\n\t *\n\t *  Unlike the method which it overrides, this takes into account\n\t *  transporttime and musical notation.\n\t *\n\t *  Time : 1.40\n\t *  Notation: 4n or 1m or 2t\n\t *  Now Relative: +3n\n\t *\n\t *  @param  {Time} time\n\t *  @return {Seconds}\n\t */\n\tTone.prototype.toSeconds = function(time){\n\t\tif (Tone.isNumber(time)){\n\t\t\treturn time;\n\t\t} else if (Tone.isUndef(time)){\n\t\t\treturn this.now();\n\t\t} else if (Tone.isString(time) || Tone.isObject(time)){\n\t\t\treturn (new Tone.Time(time)).toSeconds();\n\t\t} else if (time instanceof Tone.TimeBase){\n\t\t\treturn time.toSeconds();\n\t\t}\n\t};\n\n\t/**\n\t *  Convert a frequency representation into a number.\n\t *  @param  {Frequency} freq\n\t *  @return {Hertz}      the frequency in hertz\n\t */\n\tTone.prototype.toFrequency = function(freq){\n\t\tif (Tone.isNumber(freq)){\n\t\t\treturn freq;\n\t\t} else if (Tone.isString(freq) || Tone.isUndef(freq) || Tone.isObject(freq)){\n\t\t\treturn (new Tone.Frequency(freq)).valueOf();\n\t\t} else if (freq instanceof Tone.TimeBase){\n\t\t\treturn freq.toFrequency();\n\t\t}\n\t};\n\n\t/**\n\t *  Convert a time representation into ticks.\n\t *  @param  {Time} time\n\t *  @return {Ticks}  the time in ticks\n\t */\n\tTone.prototype.toTicks = function(time){\n\t\tif (Tone.isNumber(time) || Tone.isString(time) || Tone.isObject(time)){\n\t\t\treturn (new Tone.TransportTime(time)).toTicks();\n\t\t} else if (Tone.isUndef(time)){\n\t\t\treturn Tone.Transport.ticks;\n\t\t} else if (time instanceof Tone.TimeBase){\n\t\t\treturn time.toTicks();\n\t\t}\n\t};\n\n\treturn Tone;\n});\n","define([\"../core/Tone\", \"../shim/OfflineAudioContext\"], function(Tone){\n\n\tif (Tone.supported){\n\t\tif (!Tone.global.hasOwnProperty(\"AudioContext\") && Tone.global.hasOwnProperty(\"webkitAudioContext\")){\n\t\t\tTone.global.AudioContext = Tone.global.webkitAudioContext;\n\t\t}\n\n\t\t//not functionally equivalent, but only an API placeholder\n\t\tif (!AudioContext.prototype.close){\n\t\t\tAudioContext.prototype.close = function(){\n\t\t\t\tif (Tone.isFunction(this.suspend)){\n\t\t\t\t\tthis.suspend();\n\t\t\t\t}\n\t\t\t\treturn Promise.resolve();\n\t\t\t};\n\t\t}\n\n\t\t//not functionally equivalent\n\t\tif (!AudioContext.prototype.resume){\n\t\t\tAudioContext.prototype.resume = function(){\n\t\t\t\t//play some silent audio to jumpstart the context\n\t\t\t\tvar buffer = this.createBuffer(1, 1, this.sampleRate);\n\t\t\t\tvar source = this.createBufferSource();\n\t\t\t\tsource.buffer = buffer;\n\t\t\t\tsource.connect(this.destination);\n\t\t\t\tsource.start(0);\n\t\t\t\treturn Promise.resolve();\n\t\t\t};\n\t\t}\n\n\t\t//createGain\n\t\tif (!AudioContext.prototype.createGain && AudioContext.prototype.createGainNode){\n\t\t\tAudioContext.prototype.createGain = AudioContext.prototype.createGainNode;\n\t\t}\n\n\t\t//createDelay\n\t\tif (!AudioContext.prototype.createDelay && AudioContext.prototype.createDelayNode){\n\t\t\tAudioContext.prototype.createDelay = AudioContext.prototype.createDelayNode;\n\t\t}\n\n\t\t//test decodeAudioData returns a promise\n\t\t// https://github.com/mohayonao/web-audio-api-shim/blob/master/src/AudioContext.js\n\t\t// MIT License (c) 2015 @mohayonao\n\t\tvar decodeAudioDataPromise = false;\n\t\tvar offlineContext = new OfflineAudioContext(1, 1, 44100);\n\t\tvar audioData = new Uint32Array([1179011410, 48, 1163280727, 544501094, 16, 131073, 44100, 176400, 1048580, 1635017060, 8, 0, 0, 0, 0]).buffer;\n\t\ttry {\n\t\t\tvar ret = offlineContext.decodeAudioData(audioData);\n\t\t\tif (ret && Tone.isFunction(ret.then)){\n\t\t\t\tdecodeAudioDataPromise = true;\n\t\t\t}\n\t\t} catch (e){\n\t\t\tdecodeAudioDataPromise = false;\n\t\t}\n\n\t\tif (!decodeAudioDataPromise){\n\t\t\tAudioContext.prototype._native_decodeAudioData = AudioContext.prototype.decodeAudioData;\n\t\t\tAudioContext.prototype.decodeAudioData = function(audioData){\n\t\t\t\treturn new Promise(function(success, error){\n\t\t\t\t\tthis._native_decodeAudioData(audioData, success, error);\n\t\t\t\t}.bind(this));\n\t\t\t};\n\t\t}\n\t}\n});\n","define([\"../core/Tone\", \"../signal/WaveShaper\", \"../type/Type\", \"../core/Param\",\n\t\"../shim/ConstantSourceNode\", \"../core/Gain\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class  A signal is an audio-rate value. Tone.Signal is a core component of the library.\n\t *          Unlike a number, Signals can be scheduled with sample-level accuracy. Tone.Signal\n\t *          has all of the methods available to native Web Audio\n\t *          [AudioParam](http://webaudio.github.io/web-audio-api/#the-audioparam-interface)\n\t *          as well as additional conveniences. Read more about working with signals\n\t *          [here](https://github.com/Tonejs/Tone.js/wiki/Signals).\n\t *\n\t *  @constructor\n\t *  @extends {Tone.Param}\n\t *  @param {Number|AudioParam} [value] Initial value of the signal. If an AudioParam\n\t *                                     is passed in, that parameter will be wrapped\n\t *                                     and controlled by the Signal.\n\t *  @param {string} [units=Number] unit The units the signal is in.\n\t *  @example\n\t * var signal = new Tone.Signal(10);\n\t */\n\tTone.Signal = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"value\", \"units\"], Tone.Signal);\n\t\tTone.Param.call(this, options);\n\n\t\t/**\n\t\t * The constant source node which generates the signal\n\t\t * @type {ConstantSourceNode}\n\t\t * @private\n\t\t */\n\t\tthis._constantSource = this.context.createConstantSource();\n\t\tthis._constantSource.start(0);\n\t\tthis._param = this._constantSource.offset;\n\t\tthis.value = options.value;\n\n\t\t/**\n\t\t * The node where the constant signal value is scaled.\n\t\t * @type {GainNode}\n\t\t * @private\n\t\t */\n\t\tthis.output = this._constantSource;\n\n\t\t/**\n\t\t * The node where the value is set.\n\t\t * @type {Tone.Param}\n\t\t * @private\n\t\t */\n\t\tthis.input = this._param = this.output.offset;\n\t};\n\n\tTone.extend(Tone.Signal, Tone.Param);\n\n\t/**\n\t *  The default values\n\t *  @type  {Object}\n\t *  @static\n\t *  @const\n\t */\n\tTone.Signal.defaults = {\n\t\t\"value\" : 0,\n\t\t\"units\" : Tone.Type.Default,\n\t\t\"convert\" : true,\n\t};\n\n\t//use SignalBase's connect/disconnect methods\n\tTone.Signal.prototype.connect = Tone.SignalBase.prototype.connect;\n\tTone.Signal.prototype.disconnect = Tone.SignalBase.prototype.disconnect;\n\n\t/**\n\t * Return the current signal value at the given time.\n\t * @param  {Time} time When to get the signal value\n\t * @return {Number}\n\t */\n\tTone.Signal.prototype.getValueAtTime = function(time){\n\t\tif (this._param.getValueAtTime){\n\t\t\treturn this._param.getValueAtTime(time);\n\t\t} else {\n\t\t\treturn Tone.Param.prototype.getValueAtTime.call(this, time);\n\t\t}\n\t};\n\n\t/**\n\t *  dispose and disconnect\n\t *  @returns {Tone.Signal} this\n\t */\n\tTone.Signal.prototype.dispose = function(){\n\t\tTone.Param.prototype.dispose.call(this);\n\t\tthis._constantSource.disconnect();\n\t\tthis._constantSource = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.Signal;\n});\n","define([\"../core/Tone\", \"../type/TimeBase\"], function(Tone){\n\n\t/**\n\t *  @class Tone.Frequency is a primitive type for encoding Frequency values.\n\t *         Eventually all time values are evaluated to hertz\n\t *         using the `eval` method.\n\t *  @constructor\n\t *  @extends {Tone.TimeBase}\n\t *  @param  {String|Number}  val    The time value.\n\t *  @param  {String=}  units  The units of the value.\n\t *  @example\n\t * Tone.Frequency(\"C3\") // 261\n\t * Tone.Frequency(38, \"midi\") //\n\t * Tone.Frequency(\"C3\").transpose(4);\n\t */\n\tTone.Frequency = function(val, units){\n\t\tif (this instanceof Tone.Frequency){\n\n\t\t\tTone.TimeBase.call(this, val, units);\n\n\t\t} else {\n\t\t\treturn new Tone.Frequency(val, units);\n\t\t}\n\t};\n\n\tTone.extend(Tone.Frequency, Tone.TimeBase);\n\n\t///////////////////////////////////////////////////////////////////////////\n\t//\tAUGMENT BASE EXPRESSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\tTone.Frequency.prototype._expressions = Object.assign({}, Tone.TimeBase.prototype._expressions, {\n\t\t\"midi\" : {\n\t\t\tregexp : /^(\\d+(?:\\.\\d+)?midi)/,\n\t\t\tmethod : function(value){\n\t\t\t\tif (this._defaultUnits === \"midi\"){\n\t\t\t\t\treturn value;\n\t\t\t\t} else {\n\t\t\t\t\treturn Tone.Frequency.mtof(value);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"note\" : {\n\t\t\tregexp : /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i,\n\t\t\tmethod : function(pitch, octave){\n\t\t\t\tvar index = noteToScaleIndex[pitch.toLowerCase()];\n\t\t\t\tvar noteNumber = index + (parseInt(octave) + 1) * 12;\n\t\t\t\tif (this._defaultUnits === \"midi\"){\n\t\t\t\t\treturn noteNumber;\n\t\t\t\t} else {\n\t\t\t\t\treturn Tone.Frequency.mtof(noteNumber);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"tr\" : {\n\t\t\tregexp : /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?/,\n\t\t\tmethod : function(m, q, s){\n\t\t\t\tvar total = 1;\n\t\t\t\tif (m && m !== \"0\"){\n\t\t\t\t\ttotal *= this._beatsToUnits(this._getTimeSignature() * parseFloat(m));\n\t\t\t\t}\n\t\t\t\tif (q && q !== \"0\"){\n\t\t\t\t\ttotal *= this._beatsToUnits(parseFloat(q));\n\t\t\t\t}\n\t\t\t\tif (s && s !== \"0\"){\n\t\t\t\t\ttotal *= this._beatsToUnits(parseFloat(s) / 4);\n\t\t\t\t}\n\t\t\t\treturn total;\n\t\t\t}\n\t\t}\n\t});\n\n\t///////////////////////////////////////////////////////////////////////////\n\t//\tEXPRESSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Transposes the frequency by the given number of semitones.\n\t *  @param  {Interval}  interval\n\t *  @return  {Tone.Frequency} A new transposed frequency\n\t *  @example\n\t * Tone.Frequency(\"A4\").transpose(3); //\"C5\"\n\t */\n\tTone.Frequency.prototype.transpose = function(interval){\n\t\treturn new this.constructor(this.valueOf() * Tone.intervalToFrequencyRatio(interval));\n\t};\n\n\t/**\n\t *  Takes an array of semitone intervals and returns\n\t *  an array of frequencies transposed by those intervals.\n\t *  @param  {Array}  intervals\n\t *  @return  {Array<Tone.Frequency>} Returns an array of Frequencies\n\t *  @example\n\t * Tone.Frequency(\"A4\").harmonize([0, 3, 7]); //[\"A4\", \"C5\", \"E5\"]\n\t */\n\tTone.Frequency.prototype.harmonize = function(intervals){\n\t\treturn intervals.map(function(interval){\n\t\t\treturn this.transpose(interval);\n\t\t}.bind(this));\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////\n\t//\tUNIT CONVERSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Return the value of the frequency as a MIDI note\n\t *  @return  {MIDI}\n\t *  @example\n\t * Tone.Frequency(\"C4\").toMidi(); //60\n\t */\n\tTone.Frequency.prototype.toMidi = function(){\n\t\treturn Tone.Frequency.ftom(this.valueOf());\n\t};\n\n\t/**\n\t *  Return the value of the frequency in Scientific Pitch Notation\n\t *  @return  {Note}\n\t *  @example\n\t * Tone.Frequency(69, \"midi\").toNote(); //\"A4\"\n\t */\n\tTone.Frequency.prototype.toNote = function(){\n\t\tvar freq = this.toFrequency();\n\t\tvar log = Math.log2(freq / Tone.Frequency.A4);\n\t\tvar noteNumber = Math.round(12 * log) + 57;\n\t\tvar octave = Math.floor(noteNumber/12);\n\t\tif (octave < 0){\n\t\t\tnoteNumber += -12 * octave;\n\t\t}\n\t\tvar noteName = scaleIndexToNote[noteNumber % 12];\n\t\treturn noteName + octave.toString();\n\t};\n\n\t/**\n\t *  Return the duration of one cycle in seconds.\n\t *  @return  {Seconds}\n\t */\n\tTone.Frequency.prototype.toSeconds = function(){\n\t\treturn 1 / Tone.TimeBase.prototype.toSeconds.call(this);\n\t};\n\n\t/**\n\t *  Return the value in Hertz\n\t *  @return  {Frequency}\n\t */\n\tTone.Frequency.prototype.toFrequency = function(){\n\t\treturn Tone.TimeBase.prototype.toFrequency.call(this);\n\t};\n\n\t/**\n\t *  Return the duration of one cycle in ticks\n\t *  @return  {Ticks}\n\t */\n\tTone.Frequency.prototype.toTicks = function(){\n\t\tvar quarterTime = this._beatsToUnits(1);\n\t\tvar quarters = this.valueOf() / quarterTime;\n\t\treturn Math.floor(quarters * Tone.Transport.PPQ);\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////\n\t//\tUNIT CONVERSIONS HELPERS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  With no arguments, return 0\n\t *  @return  {Number}\n\t *  @private\n\t */\n\tTone.Frequency.prototype._noArg = function(){\n\t\treturn 0;\n\t};\n\n\t/**\n\t *  Returns the value of a frequency in the current units\n\t *  @param {Frequency} freq\n\t *  @return  {Number}\n\t *  @private\n\t */\n\tTone.Frequency.prototype._frequencyToUnits = function(freq){\n\t\treturn freq;\n\t};\n\n\t/**\n\t *  Returns the value of a tick in the current time units\n\t *  @param {Ticks} ticks\n\t *  @return  {Number}\n\t *  @private\n\t */\n\tTone.Frequency.prototype._ticksToUnits = function(ticks){\n\t\treturn 1 / ((ticks * 60) / (Tone.Transport.bpm.value * Tone.Transport.PPQ));\n\t};\n\n\t/**\n\t *  Return the value of the beats in the current units\n\t *  @param {Number} beats\n\t *  @return  {Number}\n\t *  @private\n\t */\n\tTone.Frequency.prototype._beatsToUnits = function(beats){\n\t\treturn 1 / Tone.TimeBase.prototype._beatsToUnits.call(this, beats);\n\t};\n\n\t/**\n\t *  Returns the value of a second in the current units\n\t *  @param {Seconds} seconds\n\t *  @return  {Number}\n\t *  @private\n\t */\n\tTone.Frequency.prototype._secondsToUnits = function(seconds){\n\t\treturn 1 / seconds;\n\t};\n\n\t/**\n\t *  The default units if none are given.\n\t *  @private\n\t */\n\tTone.Frequency.prototype._defaultUnits = \"hz\";\n\n\t///////////////////////////////////////////////////////////////////////////\n\t//\tFREQUENCY CONVERSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Note to scale index\n\t *  @type  {Object}\n\t */\n\tvar noteToScaleIndex = {\n\t\t\"cbb\" : -2, \"cb\" : -1, \"c\" : 0, \"c#\" : 1, \"cx\" : 2,\n\t\t\"dbb\" : 0, \"db\" : 1, \"d\" : 2, \"d#\" : 3, \"dx\" : 4,\n\t\t\"ebb\" : 2, \"eb\" : 3, \"e\" : 4, \"e#\" : 5, \"ex\" : 6,\n\t\t\"fbb\" : 3, \"fb\" : 4, \"f\" : 5, \"f#\" : 6, \"fx\" : 7,\n\t\t\"gbb\" : 5, \"gb\" : 6, \"g\" : 7, \"g#\" : 8, \"gx\" : 9,\n\t\t\"abb\" : 7, \"ab\" : 8, \"a\" : 9, \"a#\" : 10, \"ax\" : 11,\n\t\t\"bbb\" : 9, \"bb\" : 10, \"b\" : 11, \"b#\" : 12, \"bx\" : 13,\n\t};\n\n\t/**\n\t *  scale index to note (sharps)\n\t *  @type  {Array}\n\t */\n\tvar scaleIndexToNote = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n\n\t/**\n\t *  The [concert pitch](https://en.wikipedia.org/wiki/Concert_pitch)\n\t *  A4's values in Hertz.\n\t *  @type {Frequency}\n\t *  @static\n\t */\n\tTone.Frequency.A4 = 440;\n\n\t/**\n\t *  Convert a MIDI note to frequency value.\n\t *  @param  {MIDI} midi The midi number to convert.\n\t *  @return {Frequency} the corresponding frequency value\n\t *  @static\n\t *  @example\n\t * Tone.Frequency.mtof(69); // returns 440\n\t */\n\tTone.Frequency.mtof = function(midi){\n\t\treturn Tone.Frequency.A4 * Math.pow(2, (midi - 69) / 12);\n\t};\n\n\t/**\n\t *  Convert a frequency value to a MIDI note.\n\t *  @param {Frequency} frequency The value to frequency value to convert.\n\t *  @returns  {MIDI}\n\t *  @static\n\t *  @example\n\t * Tone.Frequency.ftom(440); // returns 69\n\t */\n\tTone.Frequency.ftom = function(frequency){\n\t\treturn 69 + Math.round(12 * Math.log2(frequency / Tone.Frequency.A4));\n\t};\n\n\treturn Tone.Frequency;\n});\n","define([\"../core/Tone\"], function(Tone){\n\n\t/**\n\t *  @class Tone.TimeBase is a flexible encoding of time\n\t *         which can be evaluated to and from a string.\n\t *  @extends {Tone}\n\t *  @param  {Time}  val    The time value as a number, string or object\n\t *  @param  {String=}  units  Unit values\n\t *  @example\n\t * Tone.TimeBase(4, \"n\")\n\t * Tone.TimeBase(2, \"t\")\n\t * Tone.TimeBase(\"2t\")\n\t * Tone.TimeBase({\"2t\" : 2})\n\t * Tone.TimeBase(\"2t\") + Tone.TimeBase(\"4n\");\n\t */\n\tTone.TimeBase = function(val, units){\n\n\t\t//allows it to be constructed with or without 'new'\n\t\tif (this instanceof Tone.TimeBase){\n\n\t\t\t/**\n\t\t\t *  The value\n\t\t\t *  @type  {Number|String|Tone.TimeBase}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._val = val;\n\n\t\t\t/**\n\t\t\t * The units\n\t\t\t * @type {String?}\n\t\t\t * @private\n\t\t\t */\n\t\t\tthis._units = units;\n\n\t\t\t//test if the value is a string representation of a number\n\t\t\tif (Tone.isUndef(this._units) && Tone.isString(this._val) &&\n\t\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\t\tparseFloat(this._val) == this._val && this._val.charAt(0) !== \"+\"){\n\t\t\t\tthis._val = parseFloat(this._val);\n\t\t\t\tthis._units = this._defaultUnits;\n\t\t\t} else if (val && val.constructor === this.constructor){\n\t\t\t\t//if they're the same type, just copy values over\n\t\t\t\tthis._val = val._val;\n\t\t\t\tthis._units = val._units;\n\t\t\t} else if (val instanceof Tone.TimeBase){\n\t\t\t\tswitch (this._defaultUnits){\n\t\t\t\t\tcase \"s\" :\n\t\t\t\t\t\tthis._val = val.toSeconds();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"i\" :\n\t\t\t\t\t\tthis._val = val.toTicks();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"hz\" :\n\t\t\t\t\t\tthis._val = val.toFrequency();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"midi\" :\n\t\t\t\t\t\tthis._val = val.toMidi();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault :\n\t\t\t\t\t\tthrow new Error(\"Unrecognized default units \"+this._defaultUnits);\n\t\t\t\t}\n\t\t\t}\n\n\t\t} else {\n\n\t\t\treturn new Tone.TimeBase(val, units);\n\t\t}\n\t};\n\n\tTone.extend(Tone.TimeBase);\n\n\t///////////////////////////////////////////////////////////////////////////\n\t//\tABSTRACT SYNTAX TREE PARSER\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  All the primary expressions.\n\t *  @private\n\t *  @type  {Object}\n\t */\n\tTone.TimeBase.prototype._expressions = {\n\t\t\"n\" : {\n\t\t\tregexp : /^(\\d+)n(\\.?)$/i,\n\t\t\tmethod : function(value, dot){\n\t\t\t\tvalue = parseInt(value);\n\t\t\t\tvar scalar = dot === \".\" ? 1.5 : 1;\n\t\t\t\tif (value === 1){\n\t\t\t\t\treturn this._beatsToUnits(this._getTimeSignature())*scalar;\n\t\t\t\t} else {\n\t\t\t\t\treturn this._beatsToUnits(4 / value)*scalar;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"t\" : {\n\t\t\tregexp : /^(\\d+)t$/i,\n\t\t\tmethod : function(value){\n\t\t\t\tvalue = parseInt(value);\n\t\t\t\treturn this._beatsToUnits(8 / (parseInt(value) * 3));\n\t\t\t}\n\t\t},\n\t\t\"m\" : {\n\t\t\tregexp : /^(\\d+)m$/i,\n\t\t\tmethod : function(value){\n\t\t\t\treturn this._beatsToUnits(parseInt(value) * this._getTimeSignature());\n\t\t\t}\n\t\t},\n\t\t\"i\" : {\n\t\t\tregexp : /^(\\d+)i$/i,\n\t\t\tmethod : function(value){\n\t\t\t\treturn this._ticksToUnits(parseInt(value));\n\t\t\t}\n\t\t},\n\t\t\"hz\" : {\n\t\t\tregexp : /^(\\d+(?:\\.\\d+)?)hz$/i,\n\t\t\tmethod : function(value){\n\t\t\t\treturn this._frequencyToUnits(parseFloat(value));\n\t\t\t}\n\t\t},\n\t\t\"tr\" : {\n\t\t\tregexp : /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?$/,\n\t\t\tmethod : function(m, q, s){\n\t\t\t\tvar total = 0;\n\t\t\t\tif (m && m !== \"0\"){\n\t\t\t\t\ttotal += this._beatsToUnits(this._getTimeSignature() * parseFloat(m));\n\t\t\t\t}\n\t\t\t\tif (q && q !== \"0\"){\n\t\t\t\t\ttotal += this._beatsToUnits(parseFloat(q));\n\t\t\t\t}\n\t\t\t\tif (s && s !== \"0\"){\n\t\t\t\t\ttotal += this._beatsToUnits(parseFloat(s) / 4);\n\t\t\t\t}\n\t\t\t\treturn total;\n\t\t\t}\n\t\t},\n\t\t\"s\" : {\n\t\t\tregexp : /^(\\d+(?:\\.\\d+)?)s$/,\n\t\t\tmethod : function(value){\n\t\t\t\treturn this._secondsToUnits(parseFloat(value));\n\t\t\t}\n\t\t},\n\t\t\"samples\" : {\n\t\t\tregexp : /^(\\d+)samples$/,\n\t\t\tmethod : function(value){\n\t\t\t\treturn parseInt(value) / this.context.sampleRate;\n\t\t\t}\n\t\t},\n\t\t\"default\" : {\n\t\t\tregexp : /^(\\d+(?:\\.\\d+)?)$/,\n\t\t\tmethod : function(value){\n\t\t\t\treturn this._expressions[this._defaultUnits].method.call(this, value);\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t *  The default units if none are given.\n\t *  @type {String}\n\t *  @private\n\t */\n\tTone.TimeBase.prototype._defaultUnits = \"s\";\n\n\t///////////////////////////////////////////////////////////////////////////\n\t//\tTRANSPORT FALLBACKS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Return the bpm, or 120 if Transport is not available\n\t * @type {Number}\n\t * @private\n\t */\n\tTone.TimeBase.prototype._getBpm = function(){\n\t\tif (Tone.Transport){\n\t\t\treturn Tone.Transport.bpm.value;\n\t\t} else {\n\t\t\treturn 120;\n\t\t}\n\t};\n\n\t/**\n\t * Return the timeSignature or 4 if Transport is not available\n\t * @type {Number}\n\t * @private\n\t */\n\tTone.TimeBase.prototype._getTimeSignature = function(){\n\t\tif (Tone.Transport){\n\t\t\treturn Tone.Transport.timeSignature;\n\t\t} else {\n\t\t\treturn 4;\n\t\t}\n\t};\n\n\t/**\n\t * Return the PPQ or 192 if Transport is not available\n\t * @type {Number}\n\t * @private\n\t */\n\tTone.TimeBase.prototype._getPPQ = function(){\n\t\tif (Tone.Transport){\n\t\t\treturn Tone.Transport.PPQ;\n\t\t} else {\n\t\t\treturn 192;\n\t\t}\n\t};\n\n\t/**\n\t * Return the current time in whichever context is relevant\n\t * @type {Number}\n\t * @private\n\t */\n\tTone.TimeBase.prototype._now = function(){\n\t\treturn this.now();\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////\n\t//\tUNIT CONVERSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Returns the value of a frequency in the current units\n\t *  @param {Frequency} freq\n\t *  @return  {Number}\n\t *  @private\n\t */\n\tTone.TimeBase.prototype._frequencyToUnits = function(freq){\n\t\treturn 1/freq;\n\t};\n\n\t/**\n\t *  Return the value of the beats in the current units\n\t *  @param {Number} beats\n\t *  @return  {Number}\n\t *  @private\n\t */\n\tTone.TimeBase.prototype._beatsToUnits = function(beats){\n\t\treturn (60 / this._getBpm()) * beats;\n\t};\n\n\t/**\n\t *  Returns the value of a second in the current units\n\t *  @param {Seconds} seconds\n\t *  @return  {Number}\n\t *  @private\n\t */\n\tTone.TimeBase.prototype._secondsToUnits = function(seconds){\n\t\treturn seconds;\n\t};\n\n\t/**\n\t *  Returns the value of a tick in the current time units\n\t *  @param {Ticks} ticks\n\t *  @return  {Number}\n\t *  @private\n\t */\n\tTone.TimeBase.prototype._ticksToUnits = function(ticks){\n\t\treturn ticks * (this._beatsToUnits(1) / this._getPPQ());\n\t};\n\n\t/**\n\t * With no arguments, return 'now'\n\t *  @return  {Number}\n\t *  @private\n\t */\n\tTone.TimeBase.prototype._noArg = function(){\n\t\treturn this._now();\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////\n\t//\tEXPRESSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Evaluate the time value. Returns the time\n\t *  in seconds.\n\t *  @return  {Seconds}\n\t */\n\tTone.TimeBase.prototype.valueOf = function(){\n\t\tif (Tone.isUndef(this._val)){\n\t\t\treturn this._noArg();\n\t\t} else if (Tone.isString(this._val) && Tone.isUndef(this._units)){\n\t\t\tfor (var units in this._expressions){\n\t\t\t\tif (this._expressions[units].regexp.test(this._val.trim())){\n\t\t\t\t\tthis._units = units;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (Tone.isObject(this._val)){\n\t\t\tvar total = 0;\n\t\t\tfor (var typeName in this._val){\n\t\t\t\tvar quantity = this._val[typeName];\n\t\t\t\tvar time = (new this.constructor(typeName)).valueOf() * quantity;\n\t\t\t\ttotal += time;\n\t\t\t}\n\t\t\treturn total;\n\t\t}\n\t\tif (Tone.isDefined(this._units)){\n\t\t\tvar expr = this._expressions[this._units];\n\t\t\tvar matching = this._val.toString().trim().match(expr.regexp);\n\t\t\tif (matching){\n\t\t\t\treturn expr.method.apply(this, matching.slice(1));\n\t\t\t} else {\n\t\t\t\treturn expr.method.call(this, parseFloat(this._val));\n\t\t\t}\n\t\t} else {\n\t\t\treturn this._val;\n\t\t}\n\t};\n\n\t/**\n\t *  Return the value in seconds\n\t *  @return {Seconds}\n\t */\n\tTone.TimeBase.prototype.toSeconds = function(){\n\t\treturn this.valueOf();\n\t};\n\n\t/**\n\t *  Return the value in hertz\n\t *  @return {Frequency}\n\t */\n\tTone.TimeBase.prototype.toFrequency = function(){\n\t\treturn 1 / this.toSeconds();\n\t};\n\n\t/**\n\t *  Return the time in samples\n\t *  @return  {Samples}\n\t */\n\tTone.TimeBase.prototype.toSamples = function(){\n\t\treturn this.toSeconds() * this.context.sampleRate;\n\t};\n\n\t/**\n\t *  Return the time in milliseconds.\n\t *  @return  {Milliseconds}\n\t */\n\tTone.TimeBase.prototype.toMilliseconds = function(){\n\t\treturn this.toSeconds() * 1000;\n\t};\n\n\t/**\n\t *  Clean up\n\t *  @return {Tone.TimeBase} this\n\t */\n\tTone.TimeBase.prototype.dispose = function(){\n\t\tthis._val = null;\n\t\tthis._units = null;\n\t};\n\n\treturn Tone.TimeBase;\n});\n","define([\"../core/Tone\", \"../type/TimeBase\", \"../type/Frequency\"], function(Tone){\n\n\t/**\n\t *  @class Tone.Time is a primitive type for encoding Time values.\n\t *         Tone.Time can be constructed with or without the `new` keyword. Tone.Time can be passed\n\t *         into the parameter of any method which takes time as an argument.\n\t *  @constructor\n\t *  @extends {Tone.TimeBase}\n\t *  @param  {String|Number|Object}  val    The time value.\n\t *  @param  {String=}  units  The units of the value.\n\t *  @example\n\t * var t = Tone.Time(\"4n\");//a quarter note\n\t */\n\tTone.Time = function(val, units){\n\t\tif (this instanceof Tone.Time){\n\n\t\t\tTone.TimeBase.call(this, val, units);\n\n\t\t} else {\n\t\t\treturn new Tone.Time(val, units);\n\t\t}\n\t};\n\n\tTone.extend(Tone.Time, Tone.TimeBase);\n\n\t/**\n\t * Extend the base expressions\n\t */\n\tTone.Time.prototype._expressions = Object.assign({}, Tone.TimeBase.prototype._expressions, {\n\t\t\"quantize\" : {\n\t\t\tregexp : /^@(.+)/,\n\t\t\tmethod : function(capture){\n\t\t\t\tif (Tone.Transport){\n\t\t\t\t\tvar quantTo = new this.constructor(capture);\n\t\t\t\t\treturn this._secondsToUnits(Tone.Transport.nextSubdivision(quantTo));\n\t\t\t\t} else {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"now\" : {\n\t\t\tregexp : /^\\+(.+)/,\n\t\t\tmethod : function(capture){\n\t\t\t\treturn this._now() + (new this.constructor(capture));\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t *  Quantize the time by the given subdivision. Optionally add a\n\t *  percentage which will move the time value towards the ideal\n\t *  quantized value by that percentage.\n\t *  @param  {Number|Time}  val    The subdivision to quantize to\n\t *  @param  {NormalRange}  [percent=1]  Move the time value\n\t *                                   towards the quantized value by\n\t *                                   a percentage.\n\t *  @return  {Number}  this\n\t *  @example\n\t * Tone.Time(21).quantize(2) //returns 22\n\t * Tone.Time(0.6).quantize(\"4n\", 0.5) //returns 0.55\n\t */\n\tTone.Time.prototype.quantize = function(subdiv, percent){\n\t\tpercent = Tone.defaultArg(percent, 1);\n\t\tvar subdivision = new this.constructor(subdiv);\n\t\tvar value = this.valueOf();\n\t\tvar multiple = Math.round(value / subdivision);\n\t\tvar ideal = multiple * subdivision;\n\t\tvar diff = ideal - value;\n\t\treturn value + diff * percent;\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// CONVERSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Convert a Time to Notation. The notation values are will be the\n\t *  closest representation between 1m to 128th note.\n\t *  @return {Notation}\n\t *  @example\n\t * //if the Transport is at 120bpm:\n\t * Tone.Time(2).toNotation();//returns \"1m\"\n\t */\n\tTone.Time.prototype.toNotation = function(){\n\t\tvar time = this.toSeconds();\n\t\tvar testNotations = [\"1m\"];\n\t\tfor (var power = 1; power < 8; power++){\n\t\t\tvar subdiv = Math.pow(2, power);\n\t\t\ttestNotations.push(subdiv + \"n.\");\n\t\t\ttestNotations.push(subdiv + \"n\");\n\t\t\ttestNotations.push(subdiv + \"t\");\n\t\t}\n\t\ttestNotations.push(\"0\");\n\t\t//find the closets notation representation\n\t\tvar closest = testNotations[0];\n\t\tvar closestSeconds = Tone.Time(testNotations[0]).toSeconds();\n\t\ttestNotations.forEach(function(notation){\n\t\t\tvar notationSeconds = Tone.Time(notation).toSeconds();\n\t\t\tif (Math.abs(notationSeconds - time) < Math.abs(closestSeconds - time)){\n\t\t\t\tclosest = notation;\n\t\t\t\tclosestSeconds = notationSeconds;\n\t\t\t}\n\t\t});\n\t\treturn closest;\n\t};\n\n\t/**\n\t *  Return the time encoded as Bars:Beats:Sixteenths.\n\t *  @return  {BarsBeatsSixteenths}\n\t */\n\tTone.Time.prototype.toBarsBeatsSixteenths = function(){\n\t\tvar quarterTime = this._beatsToUnits(1);\n\t\tvar quarters = this.valueOf() / quarterTime;\n\t\tquarters = parseFloat(quarters.toFixed(4));\n\t\tvar measures = Math.floor(quarters / this._getTimeSignature());\n\t\tvar sixteenths = (quarters % 1) * 4;\n\t\tquarters = Math.floor(quarters) % this._getTimeSignature();\n\t\tsixteenths = sixteenths.toString();\n\t\tif (sixteenths.length > 3){\n\t\t\t// the additional parseFloat removes insignificant trailing zeroes\n\t\t\tsixteenths = parseFloat(parseFloat(sixteenths).toFixed(3));\n\t\t}\n\t\tvar progress = [measures, quarters, sixteenths];\n\t\treturn progress.join(\":\");\n\t};\n\n\t/**\n\t *  Return the time in ticks.\n\t *  @return  {Ticks}\n\t */\n\tTone.Time.prototype.toTicks = function(){\n\t\tvar quarterTime = this._beatsToUnits(1);\n\t\tvar quarters = this.valueOf() / quarterTime;\n\t\treturn Math.round(quarters * this._getPPQ());\n\t};\n\n\t/**\n\t *  Return the time in seconds.\n\t *  @return  {Seconds}\n\t */\n\tTone.Time.prototype.toSeconds = function(){\n\t\treturn this.valueOf();\n\t};\n\n\t/**\n\t *  Return the value as a midi note.\n\t *  @return  {Midi}\n\t */\n\tTone.Time.prototype.toMidi = function(){\n\t\treturn Tone.Frequency.ftom(this.toFrequency());\n\t};\n\n\treturn Tone.Time;\n});\n","define([\"../core/Tone\", \"../type/Type\", \"../core/AudioNode\", \"../core/Timeline\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class Tone.Param wraps the native Web Audio's AudioParam to provide\n\t *         additional unit conversion functionality. It also\n\t *         serves as a base-class for classes which have a single,\n\t *         automatable parameter.\n\t *  @extends {Tone.AudioNode}\n\t *  @param  {AudioParam}  param  The parameter to wrap.\n\t *  @param  {Tone.Type} units The units of the audio param.\n\t *  @param  {Boolean} convert If the param should be converted.\n\t */\n\tTone.Param = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"param\", \"units\", \"convert\"], Tone.Param);\n\t\tTone.AudioNode.call(this, options);\n\n\t\t/**\n\t\t *  The native parameter to control\n\t\t *  @type  {AudioParam}\n\t\t *  @private\n\t\t */\n\t\tthis._param = this.input = options.param;\n\n\t\t/**\n\t\t *  The units of the parameter\n\t\t *  @type {Tone.Type}\n\t\t */\n\t\tthis.units = options.units;\n\n\t\t/**\n\t\t *  If the value should be converted or not\n\t\t *  @type {Boolean}\n\t\t */\n\t\tthis.convert = options.convert;\n\n\t\t/**\n\t\t *  True if the signal value is being overridden by\n\t\t *  a connected signal.\n\t\t *  @readOnly\n\t\t *  @type  {boolean}\n\t\t *  @private\n\t\t */\n\t\tthis.overridden = false;\n\n\t\t/**\n\t\t * The timeline which tracks all of the automations.\n\t\t * @type {Tone.Timeline}\n\t\t * @private\n\t\t */\n\t\tthis._events = new Tone.Timeline(1000);\n\n\t\tif (Tone.isDefined(options.value) && this._param){\n\t\t\tthis.setValueAtTime(options.value, 0);\n\t\t}\n\t};\n\n\tTone.extend(Tone.Param, Tone.AudioNode);\n\n\t/**\n\t *  Defaults\n\t *  @type  {Object}\n\t *  @const\n\t */\n\tTone.Param.defaults = {\n\t\t\"units\" : Tone.Type.Default,\n\t\t\"convert\" : true,\n\t\t\"param\" : undefined\n\t};\n\n\t/**\n\t * The current value of the parameter.\n\t * @memberOf Tone.Param#\n\t * @type {Number}\n\t * @name value\n\t */\n\tObject.defineProperty(Tone.Param.prototype, \"value\", {\n\t\tget : function(){\n\t\t\tvar now = this.now();\n\t\t\treturn this._toUnits(this.getValueAtTime(now));\n\t\t},\n\t\tset : function(value){\n\t\t\tthis._initialValue = this._fromUnits(value);\n\t\t\tthis.cancelScheduledValues(this.context.currentTime);\n\t\t\tthis.setValueAtTime(value, this.context.currentTime);\n\t\t}\n\t});\n\n\t/**\n\t * The minimum output value of the parameter\n\t * @memberOf Tone.Param#\n\t * @type {Number}\n\t * @name value\n\t */\n\tObject.defineProperty(Tone.Param.prototype, \"minValue\", {\n\t\tget : function(){\n\t\t\tif (this.units === Tone.Type.Time || this.units === Tone.Type.Frequency ||\n\t\t\t\tthis.units === Tone.Type.NormalRange || this.units === Tone.Type.Positive ||\n\t\t\t\tthis.units === Tone.Type.BPM){\n\t\t\t\treturn 0;\n\t\t\t} else if (this.units === Tone.Type.AudioRange){\n\t\t\t\treturn -1;\n\t\t\t} else if (this.units === Tone.Type.Decibels){\n\t\t\t\treturn -Infinity;\n\t\t\t} else {\n\t\t\t\treturn this._param.minValue;\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t * The maximum output value of the parameter\n\t * @memberOf Tone.Param#\n\t * @type {Number}\n\t * @name value\n\t */\n\tObject.defineProperty(Tone.Param.prototype, \"maxValue\", {\n\t\tget : function(){\n\t\t\tif (this.units === Tone.Type.NormalRange ||\n\t\t\t\tthis.units === Tone.Type.AudioRange){\n\t\t\t\treturn 1;\n\t\t\t} else {\n\t\t\t\treturn this._param.maxValue;\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t *  Convert the given value from the type specified by Tone.Param.units\n\t *  into the destination value (such as Gain or Frequency).\n\t *  @private\n\t *  @param  {*} val the value to convert\n\t *  @return {number}     the number which the value should be set to\n\t */\n\tTone.Param.prototype._fromUnits = function(val){\n\t\tif ((this.convert || Tone.isUndef(this.convert)) && !this.overridden){\n\t\t\tswitch (this.units){\n\t\t\t\tcase Tone.Type.Time:\n\t\t\t\t\treturn this.toSeconds(val);\n\t\t\t\tcase Tone.Type.Frequency:\n\t\t\t\t\treturn this.toFrequency(val);\n\t\t\t\tcase Tone.Type.Decibels:\n\t\t\t\t\treturn Tone.dbToGain(val);\n\t\t\t\tcase Tone.Type.NormalRange:\n\t\t\t\t\treturn Math.min(Math.max(val, 0), 1);\n\t\t\t\tcase Tone.Type.AudioRange:\n\t\t\t\t\treturn Math.min(Math.max(val, -1), 1);\n\t\t\t\tcase Tone.Type.Positive:\n\t\t\t\t\treturn Math.max(val, 0);\n\t\t\t\tdefault:\n\t\t\t\t\treturn val;\n\t\t\t}\n\t\t} else {\n\t\t\treturn val;\n\t\t}\n\t};\n\n\t/**\n\t * Convert the parameters value into the units specified by Tone.Param.units.\n\t * @private\n\t * @param  {number} val the value to convert\n\t * @return {number}\n\t */\n\tTone.Param.prototype._toUnits = function(val){\n\t\tif (this.convert || Tone.isUndef(this.convert)){\n\t\t\tswitch (this.units){\n\t\t\t\tcase Tone.Type.Decibels:\n\t\t\t\t\treturn Tone.gainToDb(val);\n\t\t\t\tdefault:\n\t\t\t\t\treturn val;\n\t\t\t}\n\t\t} else {\n\t\t\treturn val;\n\t\t}\n\t};\n\n\t/**\n\t *  the minimum output value\n\t *  @type {Number}\n\t *  @private\n\t */\n\tTone.Param.prototype._minOutput = 0.00001;\n\n\t/**\n\t *  The event types\n\t *  @enum {String}\n\t *  @private\n\t */\n\tTone.Param.AutomationType = {\n\t\tLinear : \"linearRampToValueAtTime\",\n\t\tExponential : \"exponentialRampToValueAtTime\",\n\t\tTarget : \"setTargetAtTime\",\n\t\tSetValue : \"setValueAtTime\",\n\t\tCancel : \"cancelScheduledValues\"\n\t};\n\n\t/**\n\t *  Schedules a parameter value change at the given time.\n\t *  @param {*}\tvalue The value to set the signal.\n\t *  @param {Time}  time The time when the change should occur.\n\t *  @returns {Tone.Param} this\n\t *  @example\n\t * //set the frequency to \"G4\" in exactly 1 second from now.\n\t * freq.setValueAtTime(\"G4\", \"+1\");\n\t */\n\tTone.Param.prototype.setValueAtTime = function(value, time){\n\t\ttime = this.toSeconds(time);\n\t\tvalue = this._fromUnits(value);\n\t\tthis._events.add({\n\t\t\t\"type\" : Tone.Param.AutomationType.SetValue,\n\t\t\t\"value\" : value,\n\t\t\t\"time\" : time,\n\t\t});\n\t\tthis.log(Tone.Param.AutomationType.SetValue, value, time);\n\t\tthis._param.setValueAtTime(value, time);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Get the signals value at the given time. Subsequent scheduling\n\t *  may invalidate the returned value.\n\t *  @param {Time} time When to get the value\n\t *  @returns {Number} The value at the given time\n\t */\n\tTone.Param.prototype.getValueAtTime = function(time){\n\t\ttime = this.toSeconds(time);\n\t\tvar after = this._events.getAfter(time);\n\t\tvar before = this._events.get(time);\n\t\tvar initialValue = Tone.defaultArg(this._initialValue, this._param.defaultValue);\n\t\tvar value = initialValue;\n\t\t//if it was set by\n\t\tif (before === null){\n\t\t\tvalue = initialValue;\n\t\t} else if (before.type === Tone.Param.AutomationType.Target){\n\t\t\tvar previous = this._events.getBefore(before.time);\n\t\t\tvar previousVal;\n\t\t\tif (previous === null){\n\t\t\t\tpreviousVal = initialValue;\n\t\t\t} else {\n\t\t\t\tpreviousVal = previous.value;\n\t\t\t}\n\t\t\tvalue = this._exponentialApproach(before.time, previousVal, before.value, before.constant, time);\n\t\t} else if (after === null){\n\t\t\tvalue = before.value;\n\t\t} else if (after.type === Tone.Param.AutomationType.Linear){\n\t\t\tvalue = this._linearInterpolate(before.time, before.value, after.time, after.value, time);\n\t\t} else if (after.type === Tone.Param.AutomationType.Exponential){\n\t\t\tvalue = this._exponentialInterpolate(before.time, before.value, after.time, after.value, time);\n\t\t} else {\n\t\t\tvalue = before.value;\n\t\t}\n\t\treturn value;\n\t};\n\n\t/**\n\t *  Creates a schedule point with the current value at the current time.\n\t *  This is useful for creating an automation anchor point in order to\n\t *  schedule changes from the current value.\n\t *\n\t *  @param {number=} now (Optionally) pass the now value in.\n\t *  @returns {Tone.Param} this\n\t */\n\tTone.Param.prototype.setRampPoint = function(time){\n\t\ttime = this.toSeconds(time);\n\t\tvar currentVal = this.getValueAtTime(time);\n\t\tthis.cancelAndHoldAtTime(time);\n\t\tif (currentVal === 0){\n\t\t\tcurrentVal = this._minOutput;\n\t\t}\n\t\tthis.setValueAtTime(this._toUnits(currentVal), time);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Schedules a linear continuous change in parameter value from the\n\t *  previous scheduled parameter value to the given value.\n\t *\n\t *  @param  {number} value\n\t *  @param  {Time} endTime\n\t *  @returns {Tone.Param} this\n\t */\n\tTone.Param.prototype.linearRampToValueAtTime = function(value, endTime){\n\t\tvalue = this._fromUnits(value);\n\t\tendTime = this.toSeconds(endTime);\n\t\tthis._events.add({\n\t\t\t\"type\" : Tone.Param.AutomationType.Linear,\n\t\t\t\"value\" : value,\n\t\t\t\"time\" : endTime,\n\t\t});\n\t\tthis.log(Tone.Param.AutomationType.Linear, value, endTime);\n\t\tthis._param.linearRampToValueAtTime(value, endTime);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Schedules an exponential continuous change in parameter value from\n\t *  the previous scheduled parameter value to the given value.\n\t *\n\t *  @param  {number} value\n\t *  @param  {Time} endTime\n\t *  @returns {Tone.Param} this\n\t */\n\tTone.Param.prototype.exponentialRampToValueAtTime = function(value, endTime){\n\t\tvalue = this._fromUnits(value);\n\t\tvalue = Math.max(this._minOutput, value);\n\t\tendTime = this.toSeconds(endTime);\n\t\t//store the event\n\t\tthis._events.add({\n\t\t\t\"type\" : Tone.Param.AutomationType.Exponential,\n\t\t\t\"time\" : endTime,\n\t\t\t\"value\" : value\n\t\t});\n\t\tthis.log(Tone.Param.AutomationType.Exponential, value, endTime);\n\t\tthis._param.exponentialRampToValueAtTime(value, endTime);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Schedules an exponential continuous change in parameter value from\n\t *  the current time and current value to the given value over the\n\t *  duration of the rampTime.\n\t *\n\t *  @param  {number} value   The value to ramp to.\n\t *  @param  {Time} rampTime the time that it takes the\n\t *                               value to ramp from it's current value\n\t *  @param {Time}\t[startTime=now] \tWhen the ramp should start.\n\t *  @returns {Tone.Param} this\n\t *  @example\n\t * //exponentially ramp to the value 2 over 4 seconds.\n\t * signal.exponentialRampTo(2, 4);\n\t */\n\tTone.Param.prototype.exponentialRampTo = function(value, rampTime, startTime){\n\t\tstartTime = this.toSeconds(startTime);\n\t\tthis.setRampPoint(startTime);\n\t\tthis.exponentialRampToValueAtTime(value, startTime + this.toSeconds(rampTime));\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Schedules an linear continuous change in parameter value from\n\t *  the current time and current value to the given value over the\n\t *  duration of the rampTime.\n\t *\n\t *  @param  {number} value   The value to ramp to.\n\t *  @param  {Time} rampTime the time that it takes the\n\t *                               value to ramp from it's current value\n\t *  @param {Time}\t[startTime=now] \tWhen the ramp should start.\n\t *  @returns {Tone.Param} this\n\t *  @example\n\t * //linearly ramp to the value 4 over 3 seconds.\n\t * signal.linearRampTo(4, 3);\n\t */\n\tTone.Param.prototype.linearRampTo = function(value, rampTime, startTime){\n\t\tstartTime = this.toSeconds(startTime);\n\t\tthis.setRampPoint(startTime);\n\t\tthis.linearRampToValueAtTime(value, startTime + this.toSeconds(rampTime));\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Start exponentially approaching the target value at the given time. Since it\n\t *  is an exponential approach it will continue approaching after the ramp duration. The\n\t *  rampTime is the time that it takes to reach over 99% of the way towards the value.\n\t *  @param  {number} value   The value to ramp to.\n\t *  @param  {Time} rampTime the time that it takes the\n\t *                               value to ramp from it's current value\n\t *  @param {Time}\t[startTime=now] \tWhen the ramp should start.\n\t *  @returns {Tone.Param} this\n\t *  @example\n\t * //exponentially ramp to the value 2 over 4 seconds.\n\t * signal.exponentialRampTo(2, 4);\n\t */\n\tTone.Param.prototype.targetRampTo = function(value, rampTime, startTime){\n\t\tstartTime = this.toSeconds(startTime);\n\t\tthis.setRampPoint(startTime);\n\t\tthis.exponentialApproachValueAtTime(value, startTime, rampTime);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Start exponentially approaching the target value at the given time. Since it\n\t *  is an exponential approach it will continue approaching after the ramp duration. The\n\t *  rampTime is the time that it takes to reach over 99% of the way towards the value. This methods\n\t *  is similar to setTargetAtTime except the third argument is a time instead of a 'timeConstant'\n\t *  @param  {number} value   The value to ramp to.\n\t *  @param {Time}\ttime \tWhen the ramp should start.\n\t *  @param  {Time} rampTime the time that it takes the\n\t *                               value to ramp from it's current value\n\t *  @returns {Tone.Param} this\n\t *  @example\n\t * //exponentially ramp to the value 2 over 4 seconds.\n\t * signal.exponentialRampTo(2, 4);\n\t */\n\tTone.Param.prototype.exponentialApproachValueAtTime = function(value, time, rampTime){\n\t\tvar timeConstant = Math.log(this.toSeconds(rampTime)+1)/Math.log(200);\n\t\ttime = this.toSeconds(time);\n\t\treturn this.setTargetAtTime(value, time, timeConstant);\n\t};\n\n\t/**\n\t *  Start exponentially approaching the target value at the given time with\n\t *  a rate having the given time constant.\n\t *  @param {number} value\n\t *  @param {Time} startTime\n\t *  @param {number} timeConstant\n\t *  @returns {Tone.Param} this\n\t */\n\tTone.Param.prototype.setTargetAtTime = function(value, startTime, timeConstant){\n\t\tvalue = this._fromUnits(value);\n\t\t// The value will never be able to approach without timeConstant > 0.\n\t\tif (timeConstant <= 0){\n\t\t\tthrow new Error(\"timeConstant must be greater than 0\");\n\t\t}\n\t\tstartTime = this.toSeconds(startTime);\n\t\tthis._events.add({\n\t\t\t\"type\" : Tone.Param.AutomationType.Target,\n\t\t\t\"value\" : value,\n\t\t\t\"time\" : startTime,\n\t\t\t\"constant\" : timeConstant\n\t\t});\n\t\tthis.log(Tone.Param.AutomationType.Target, value, startTime, timeConstant);\n\t\tthis._param.setTargetAtTime(value, startTime, timeConstant);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Sets an array of arbitrary parameter values starting at the given time\n\t *  for the given duration.\n\t *\n\t *  @param {Array} values\n\t *  @param {Time} startTime\n\t *  @param {Time} duration\n\t *  @param {NormalRange} [scaling=1] If the values in the curve should be scaled by some value\n\t *  @returns {Tone.Param} this\n\t */\n\tTone.Param.prototype.setValueCurveAtTime = function(values, startTime, duration, scaling){\n\t\tscaling = Tone.defaultArg(scaling, 1);\n\t\tduration = this.toSeconds(duration);\n\t\tstartTime = this.toSeconds(startTime);\n\t\tthis.setValueAtTime(values[0] * scaling, startTime);\n\t\tvar segTime = duration / (values.length - 1);\n\t\tfor (var i = 1; i < values.length; i++){\n\t\t\tthis.linearRampToValueAtTime(values[i] * scaling, startTime + i * segTime);\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Cancels all scheduled parameter changes with times greater than or\n\t *  equal to startTime.\n\t *\n\t *  @param  {Time} time\n\t *  @returns {Tone.Param} this\n\t */\n\tTone.Param.prototype.cancelScheduledValues = function(time){\n\t\ttime = this.toSeconds(time);\n\t\tthis._events.cancel(time);\n\t\tthis._param.cancelScheduledValues(time);\n\t\tthis.log(Tone.Param.AutomationType.Cancel, time);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  This is similar to [cancelScheduledValues](#cancelScheduledValues) except\n\t *  it holds the automated value at time until the next automated event.\n\t *  @param  {Time} time\n\t *  @returns {Tone.Param} this\n\t */\n\tTone.Param.prototype.cancelAndHoldAtTime = function(time){\n\t\tvar valueAtTime = this.getValueAtTime(time);\n\t\tthis.log(\"cancelAndHoldAtTime\", time, \"value=\"+valueAtTime);\n\n\t\t//remove the schedule events\n\t\tthis._param.cancelScheduledValues(time);\n\n\t\t//if there is an event at the given time\n\t\t//and that even is not a \"set\"\n\t\tvar before = this._events.get(time);\n\t\tvar after = this._events.getAfter(time);\n\t\tif (before && before.time === time){\n\t\t\t//remove everything after\n\t\t\tif (after){\n\t\t\t\tthis._events.cancel(after.time);\n\t\t\t} else {\n\t\t\t\tthis._events.cancel(time + 1e-6);\n\t\t\t}\n\t\t} else if (after){\n\t\t\t//cancel the next event(s)\n\t\t\tthis._events.cancel(after.time);\n\t\t\tif (after.type === Tone.Param.AutomationType.Linear){\n\t\t\t\tthis.linearRampToValueAtTime(valueAtTime, time);\n\t\t\t} else if (after.type === Tone.Param.AutomationType.Exponential){\n\t\t\t\tthis.exponentialRampToValueAtTime(valueAtTime, time);\n\t\t\t}\n\t\t}\n\n\t\t//set the value at the given time\n\t\tthis._events.add({\n\t\t\t\"type\" : Tone.Param.AutomationType.SetValue,\n\t\t\t\"value\" : valueAtTime,\n\t\t\t\"time\" : time\n\t\t});\n\t\tthis._param.setValueAtTime(valueAtTime, time);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Ramps to the given value over the duration of the rampTime.\n\t *  Automatically selects the best ramp type (exponential or linear)\n\t *  depending on the `units` of the signal\n\t *\n\t *  @param  {number} value\n\t *  @param  {Time} rampTime \tThe time that it takes the\n\t *                              value to ramp from it's current value\n\t *  @param {Time}\t[startTime=now] \tWhen the ramp should start.\n\t *  @returns {Tone.Param} this\n\t *  @example\n\t * //ramp to the value either linearly or exponentially\n\t * //depending on the \"units\" value of the signal\n\t * signal.rampTo(0, 10);\n\t *  @example\n\t * //schedule it to ramp starting at a specific time\n\t * signal.rampTo(0, 10, 5)\n\t */\n\tTone.Param.prototype.rampTo = function(value, rampTime, startTime){\n\t\trampTime = Tone.defaultArg(rampTime, 0.1);\n\t\tif (this.units === Tone.Type.Frequency || this.units === Tone.Type.BPM || this.units === Tone.Type.Decibels){\n\t\t\tthis.exponentialRampTo(value, rampTime, startTime);\n\t\t} else {\n\t\t\tthis.linearRampTo(value, rampTime, startTime);\n\t\t}\n\t\treturn this;\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////\n\t//\tAUTOMATION CURVE CALCULATIONS\n\t//\tMIT License, copyright (c) 2014 Jordan Santell\n\t///////////////////////////////////////////////////////////////////////////\n\n\t// Calculates the the value along the curve produced by setTargetAtTime\n\tTone.Param.prototype._exponentialApproach = function(t0, v0, v1, timeConstant, t){\n\t\treturn v1 + (v0 - v1) * Math.exp(-(t - t0) / timeConstant);\n\t};\n\n\t// Calculates the the value along the curve produced by linearRampToValueAtTime\n\tTone.Param.prototype._linearInterpolate = function(t0, v0, t1, v1, t){\n\t\treturn v0 + (v1 - v0) * ((t - t0) / (t1 - t0));\n\t};\n\n\t// Calculates the the value along the curve produced by exponentialRampToValueAtTime\n\tTone.Param.prototype._exponentialInterpolate = function(t0, v0, t1, v1, t){\n\t\treturn v0 * Math.pow(v1 / v0, (t - t0) / (t1 - t0));\n\t};\n\n\t/**\n\t *  Clean up\n\t *  @returns {Tone.Param} this\n\t */\n\tTone.Param.prototype.dispose = function(){\n\t\tTone.AudioNode.prototype.dispose.call(this);\n\t\tthis._param = null;\n\t\tthis._events = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.Param;\n});\n","define([\"../core/Tone\"], function(Tone){\n\tif (Tone.supported){\n\n\t\tif (!Tone.global.hasOwnProperty(\"OfflineAudioContext\") && Tone.global.hasOwnProperty(\"webkitOfflineAudioContext\")){\n\t\t\tTone.global.OfflineAudioContext = Tone.global.webkitOfflineAudioContext;\n\t\t}\n\n\t\t//returns promise?\n\t\tvar context = new OfflineAudioContext(1, 1, 44100);\n\t\tvar ret = context.startRendering();\n\t\tif (!(ret && Tone.isFunction(ret.then))){\n\t\t\tOfflineAudioContext.prototype._native_startRendering = OfflineAudioContext.prototype.startRendering;\n\t\t\tOfflineAudioContext.prototype.startRendering = function(){\n\t\t\t\treturn new Promise(function(done){\n\t\t\t\t\tthis.oncomplete = function(e){\n\t\t\t\t\t\tdone(e.renderedBuffer);\n\t\t\t\t\t};\n\t\t\t\t\tthis._native_startRendering();\n\t\t\t\t}.bind(this));\n\t\t\t};\n\t\t}\n\t}\n});\n","define([\"../core/Tone\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class A Timeline class for scheduling and maintaining state\n\t *         along a timeline. All events must have a \"time\" property.\n\t *         Internally, events are stored in time order for fast\n\t *         retrieval.\n\t *  @extends {Tone}\n\t *  @param {Positive} [memory=Infinity] The number of previous events that are retained.\n\t */\n\tTone.Timeline = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"memory\"], Tone.Timeline);\n\t\tTone.call(this);\n\n\t\t/**\n\t\t *  The array of scheduled timeline events\n\t\t *  @type  {Array}\n\t\t *  @private\n\t\t */\n\t\tthis._timeline = [];\n\n\t\t/**\n\t\t *  The memory of the timeline, i.e.\n\t\t *  how many events in the past it will retain\n\t\t *  @type {Positive}\n\t\t */\n\t\tthis.memory = options.memory;\n\t};\n\n\tTone.extend(Tone.Timeline);\n\n\t/**\n\t *  the default parameters\n\t *  @static\n\t *  @const\n\t */\n\tTone.Timeline.defaults = {\n\t\t\"memory\" : Infinity\n\t};\n\n\t/**\n\t *  The number of items in the timeline.\n\t *  @type {Number}\n\t *  @memberOf Tone.Timeline#\n\t *  @name length\n\t *  @readOnly\n\t */\n\tObject.defineProperty(Tone.Timeline.prototype, \"length\", {\n\t\tget : function(){\n\t\t\treturn this._timeline.length;\n\t\t}\n\t});\n\n\t/**\n\t *  Insert an event object onto the timeline. Events must have a \"time\" attribute.\n\t *  @param  {Object}  event  The event object to insert into the\n\t *                           timeline.\n\t *  @returns {Tone.Timeline} this\n\t */\n\tTone.Timeline.prototype.add = function(event){\n\t\t//the event needs to have a time attribute\n\t\tif (Tone.isUndef(event.time)){\n\t\t\tthrow new Error(\"Tone.Timeline: events must have a time attribute\");\n\t\t}\n\t\tevent.time = event.time.valueOf();\n\t\tvar index = this._search(event.time);\n\t\tthis._timeline.splice(index + 1, 0, event);\n\t\t//if the length is more than the memory, remove the previous ones\n\t\tif (this.length > this.memory){\n\t\t\tvar diff = this.length - this.memory;\n\t\t\tthis._timeline.splice(0, diff);\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Remove an event from the timeline.\n\t *  @param  {Object}  event  The event object to remove from the list.\n\t *  @returns {Tone.Timeline} this\n\t */\n\tTone.Timeline.prototype.remove = function(event){\n\t\tvar index = this._timeline.indexOf(event);\n\t\tif (index !== -1){\n\t\t\tthis._timeline.splice(index, 1);\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Get the nearest event whose time is less than or equal to the given time.\n\t *  @param  {Number}  time  The time to query.\n\t *  @param  {String}  comparator Which value in the object to compare\n\t *  @returns {Object} The event object set after that time.\n\t */\n\tTone.Timeline.prototype.get = function(time, comparator){\n\t\tcomparator = Tone.defaultArg(comparator, \"time\");\n\t\tvar index = this._search(time, comparator);\n\t\tif (index !== -1){\n\t\t\treturn this._timeline[index];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t};\n\n\t/**\n\t *  Return the first event in the timeline without removing it\n\t *  @returns {Object} The first event object\n\t */\n\tTone.Timeline.prototype.peek = function(){\n\t\treturn this._timeline[0];\n\t};\n\n\t/**\n\t *  Return the first event in the timeline and remove it\n\t *  @returns {Object} The first event object\n\t */\n\tTone.Timeline.prototype.shift = function(){\n\t\treturn this._timeline.shift();\n\t};\n\n\t/**\n\t *  Get the event which is scheduled after the given time.\n\t *  @param  {Number}  time  The time to query.\n\t *  @param  {String}  comparator Which value in the object to compare\n\t *  @returns {Object} The event object after the given time\n\t */\n\tTone.Timeline.prototype.getAfter = function(time, comparator){\n\t\tcomparator = Tone.defaultArg(comparator, \"time\");\n\t\tvar index = this._search(time, comparator);\n\t\tif (index + 1 < this._timeline.length){\n\t\t\treturn this._timeline[index + 1];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t};\n\n\t/**\n\t *  Get the event before the event at the given time.\n\t *  @param  {Number}  time  The time to query.\n\t *  @param  {String}  comparator Which value in the object to compare\n\t *  @returns {Object} The event object before the given time\n\t */\n\tTone.Timeline.prototype.getBefore = function(time, comparator){\n\t\tcomparator = Tone.defaultArg(comparator, \"time\");\n\t\tvar len = this._timeline.length;\n\t\t//if it's after the last item, return the last item\n\t\tif (len > 0 && this._timeline[len - 1][comparator] < time){\n\t\t\treturn this._timeline[len - 1];\n\t\t}\n\t\tvar index = this._search(time, comparator);\n\t\tif (index - 1 >= 0){\n\t\t\treturn this._timeline[index - 1];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t};\n\n\t/**\n\t *  Cancel events after the given time\n\t *  @param  {Number}  time  The time to query.\n\t *  @returns {Tone.Timeline} this\n\t */\n\tTone.Timeline.prototype.cancel = function(after){\n\t\tif (this._timeline.length > 1){\n\t\t\tvar index = this._search(after);\n\t\t\tif (index >= 0){\n\t\t\t\tif (this._timeline[index].time === after){\n\t\t\t\t\t//get the first item with that time\n\t\t\t\t\tfor (var i = index; i >= 0; i--){\n\t\t\t\t\t\tif (this._timeline[i].time === after){\n\t\t\t\t\t\t\tindex = i;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis._timeline = this._timeline.slice(0, index);\n\t\t\t\t} else {\n\t\t\t\t\tthis._timeline = this._timeline.slice(0, index + 1);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._timeline = [];\n\t\t\t}\n\t\t} else if (this._timeline.length === 1){\n\t\t\t//the first item's time\n\t\t\tif (this._timeline[0].time >= after){\n\t\t\t\tthis._timeline = [];\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Cancel events before or equal to the given time.\n\t *  @param  {Number}  time  The time to cancel before.\n\t *  @returns {Tone.Timeline} this\n\t */\n\tTone.Timeline.prototype.cancelBefore = function(time){\n\t\tvar index = this._search(time);\n\t\tif (index >= 0){\n\t\t\tthis._timeline = this._timeline.slice(index + 1);\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t * Returns the previous event if there is one. null otherwise\n\t * @param  {Object} event The event to find the previous one of\n\t * @return {Object}       The event right before the given event\n\t */\n\tTone.Timeline.prototype.previousEvent = function(event){\n\t\tvar index = this._timeline.indexOf(event);\n\t\tif (index > 0){\n\t\t\treturn this._timeline[index-1];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t};\n\n\t/**\n\t *  Does a binary search on the timeline array and returns the\n\t *  nearest event index whose time is after or equal to the given time.\n\t *  If a time is searched before the first index in the timeline, -1 is returned.\n\t *  If the time is after the end, the index of the last item is returned.\n\t *  @param  {Number}  time\n\t *  @param  {String}  comparator Which value in the object to compare\n\t *  @return  {Number} the index in the timeline array\n\t *  @private\n\t */\n\tTone.Timeline.prototype._search = function(time, comparator){\n\t\tif (this._timeline.length === 0){\n\t\t\treturn -1;\n\t\t}\n\t\tcomparator = Tone.defaultArg(comparator, \"time\");\n\t\tvar beginning = 0;\n\t\tvar len = this._timeline.length;\n\t\tvar end = len;\n\t\tif (len > 0 && this._timeline[len - 1][comparator] <= time){\n\t\t\treturn len - 1;\n\t\t}\n\t\twhile (beginning < end){\n\t\t\t// calculate the midpoint for roughly equal partition\n\t\t\tvar midPoint = Math.floor(beginning + (end - beginning) / 2);\n\t\t\tvar event = this._timeline[midPoint];\n\t\t\tvar nextEvent = this._timeline[midPoint + 1];\n\t\t\tif (event[comparator] === time){\n\t\t\t\t//choose the last one that has the same time\n\t\t\t\tfor (var i = midPoint; i < this._timeline.length; i++){\n\t\t\t\t\tvar testEvent = this._timeline[i];\n\t\t\t\t\tif (testEvent[comparator] === time){\n\t\t\t\t\t\tmidPoint = i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn midPoint;\n\t\t\t} else if (event[comparator] < time && nextEvent[comparator] > time){\n\t\t\t\treturn midPoint;\n\t\t\t} else if (event[comparator] > time){\n\t\t\t\t//search lower\n\t\t\t\tend = midPoint;\n\t\t\t} else {\n\t\t\t\t//search upper\n\t\t\t\tbeginning = midPoint + 1;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t};\n\n\t/**\n\t *  Internal iterator. Applies extra safety checks for\n\t *  removing items from the array.\n\t *  @param  {Function}  callback\n\t *  @param  {Number=}    lowerBound\n\t *  @param  {Number=}    upperBound\n\t *  @private\n\t */\n\tTone.Timeline.prototype._iterate = function(callback, lowerBound, upperBound){\n\t\tlowerBound = Tone.defaultArg(lowerBound, 0);\n\t\tupperBound = Tone.defaultArg(upperBound, this._timeline.length-1);\n\t\tthis._timeline.slice(lowerBound, upperBound+1).forEach(function(event){\n\t\t\tcallback.call(this, event);\n\t\t}.bind(this));\n\t};\n\n\t/**\n\t *  Iterate over everything in the array\n\t *  @param  {Function}  callback The callback to invoke with every item\n\t *  @returns {Tone.Timeline} this\n\t */\n\tTone.Timeline.prototype.forEach = function(callback){\n\t\tthis._iterate(callback);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Iterate over everything in the array at or before the given time.\n\t *  @param  {Number}  time The time to check if items are before\n\t *  @param  {Function}  callback The callback to invoke with every item\n\t *  @returns {Tone.Timeline} this\n\t */\n\tTone.Timeline.prototype.forEachBefore = function(time, callback){\n\t\t//iterate over the items in reverse so that removing an item doesn't break things\n\t\tvar upperBound = this._search(time);\n\t\tif (upperBound !== -1){\n\t\t\tthis._iterate(callback, 0, upperBound);\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Iterate over everything in the array after the given time.\n\t *  @param  {Number}  time The time to check if items are before\n\t *  @param  {Function}  callback The callback to invoke with every item\n\t *  @returns {Tone.Timeline} this\n\t */\n\tTone.Timeline.prototype.forEachAfter = function(time, callback){\n\t\t//iterate over the items in reverse so that removing an item doesn't break things\n\t\tvar lowerBound = this._search(time);\n\t\tthis._iterate(callback, lowerBound + 1);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Iterate over everything in the array between the startTime and endTime. \n\t *  The timerange is inclusive of the startTime, but exclusive of the endTime. \n\t *  range = [startTime, endTime). \n\t *  @param  {Number}  startTime The time to check if items are before\n\t *  @param  {Number}  endTime The end of the test interval. \n\t *  @param  {Function}  callback The callback to invoke with every item\n\t *  @returns {Tone.Timeline} this\n\t */\n\tTone.Timeline.prototype.forEachBetween = function(startTime, endTime, callback){\n\t\tvar lowerBound = this._search(startTime);\n\t\tvar upperBound = this._search(endTime);\n\t\tif (lowerBound !== -1 && upperBound !== -1){\n\t\t\tif (this._timeline[lowerBound].time !== startTime){\n\t\t\t\tlowerBound += 1;\n\t\t\t}\n\t\t\t//exclusive of the end time\n\t\t\tif (this._timeline[upperBound].time === endTime){\n\t\t\t\tupperBound -= 1;\n\t\t\t}\n\t\t\tthis._iterate(callback, lowerBound, upperBound);\n\t\t} else if (lowerBound === -1){\n\t\t\tthis._iterate(callback, 0, upperBound);\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Iterate over everything in the array at or after the given time. Similar to\n\t *  forEachAfter, but includes the item(s) at the given time.\n\t *  @param  {Number}  time The time to check if items are before\n\t *  @param  {Function}  callback The callback to invoke with every item\n\t *  @returns {Tone.Timeline} this\n\t */\n\tTone.Timeline.prototype.forEachFrom = function(time, callback){\n\t\t//iterate over the items in reverse so that removing an item doesn't break things\n\t\tvar lowerBound = this._search(time);\n\t\t//work backwards until the event time is less than time\n\t\twhile (lowerBound >= 0 && this._timeline[lowerBound].time >= time){\n\t\t\tlowerBound--;\n\t\t}\n\t\tthis._iterate(callback, lowerBound + 1);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Iterate over everything in the array at the given time\n\t *  @param  {Number}  time The time to check if items are before\n\t *  @param  {Function}  callback The callback to invoke with every item\n\t *  @returns {Tone.Timeline} this\n\t */\n\tTone.Timeline.prototype.forEachAtTime = function(time, callback){\n\t\t//iterate over the items in reverse so that removing an item doesn't break things\n\t\tvar upperBound = this._search(time);\n\t\tif (upperBound !== -1){\n\t\t\tthis._iterate(function(event){\n\t\t\t\tif (event.time === time){\n\t\t\t\t\tcallback.call(this, event);\n\t\t\t\t}\n\t\t\t}, 0, upperBound);\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Clean up.\n\t *  @return  {Tone.Timeline}  this\n\t */\n\tTone.Timeline.prototype.dispose = function(){\n\t\tTone.prototype.dispose.call(this);\n\t\tthis._timeline = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.Timeline;\n});\n","define([\"../core/Tone\", \"../core/AudioNode\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class  Base class for all Signals. Used Internally.\n\t *\n\t *  @constructor\n\t *  @extends {Tone}\n\t */\n\tTone.SignalBase = function(){\n\t\tTone.AudioNode.call(this);\n\t};\n\n\tTone.extend(Tone.SignalBase, Tone.AudioNode);\n\n\t/**\n\t *  When signals connect to other signals or AudioParams,\n\t *  they take over the output value of that signal or AudioParam.\n\t *  For all other nodes, the behavior is the same as a default <code>connect</code>.\n\t *\n\t *  @override\n\t *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node\n\t *  @param {number} [outputNumber=0] The output number to connect from.\n\t *  @param {number} [inputNumber=0] The input number to connect to.\n\t *  @returns {Tone.SignalBase} this\n\t */\n\tTone.SignalBase.prototype.connect = function(node, outputNumber, inputNumber){\n\t\t//zero it out so that the signal can have full control\n\t\tif ((Tone.Signal && Tone.Signal === node.constructor) ||\n\t\t\t\t(Tone.Param && Tone.Param === node.constructor)){\n\t\t\t//cancel changes\n\t\t\tnode._param.cancelScheduledValues(0);\n\t\t\t//reset the value\n\t\t\tnode._param.setValueAtTime(0, 0);\n\t\t\t//mark the value as overridden\n\t\t\tnode.overridden = true;\n\t\t} else if (node instanceof AudioParam){\n\t\t\tnode.cancelScheduledValues(0);\n\t\t\tnode.setValueAtTime(0, 0);\n\t\t}\n\t\tTone.AudioNode.prototype.connect.call(this, node, outputNumber, inputNumber);\n\t\treturn this;\n\t};\n\n\treturn Tone.SignalBase;\n});\n","define([\"../core/Tone\", \"../signal/SignalBase\", \"../shim/WaveShaperNode\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class Wraps the native Web Audio API\n\t *         [WaveShaperNode](http://webaudio.github.io/web-audio-api/#the-waveshapernode-interface).\n\t *\n\t *  @extends {Tone.SignalBase}\n\t *  @constructor\n\t *  @param {function|Array|Number} mapping The function used to define the values.\n\t *                                    The mapping function should take two arguments:\n\t *                                    the first is the value at the current position\n\t *                                    and the second is the array position.\n\t *                                    If the argument is an array, that array will be\n\t *                                    set as the wave shaping function. The input\n\t *                                    signal is an AudioRange [-1, 1] value and the output\n\t *                                    signal can take on any numerical values.\n\t *\n\t *  @param {Number} [bufferLen=1024] The length of the WaveShaperNode buffer.\n\t *  @example\n\t * var timesTwo = new Tone.WaveShaper(function(val){\n\t * \treturn val * 2;\n\t * }, 2048);\n\t *  @example\n\t * //a waveshaper can also be constructed with an array of values\n\t * var invert = new Tone.WaveShaper([1, -1]);\n\t */\n\tTone.WaveShaper = function(mapping, bufferLen){\n\n\t\tTone.SignalBase.call(this);\n\n\t\t/**\n\t\t *  the waveshaper\n\t\t *  @type {WaveShaperNode}\n\t\t *  @private\n\t\t */\n\t\tthis._shaper = this.input = this.output = this.context.createWaveShaper();\n\n\t\t/**\n\t\t *  the waveshapers curve\n\t\t *  @type {Float32Array}\n\t\t *  @private\n\t\t */\n\t\tthis._curve = null;\n\n\t\tif (Array.isArray(mapping)){\n\t\t\tthis.curve = mapping;\n\t\t} else if (isFinite(mapping) || Tone.isUndef(mapping)){\n\t\t\tthis._curve = new Float32Array(Tone.defaultArg(mapping, 1024));\n\t\t} else if (Tone.isFunction(mapping)){\n\t\t\tthis._curve = new Float32Array(Tone.defaultArg(bufferLen, 1024));\n\t\t\tthis.setMap(mapping);\n\t\t}\n\t};\n\n\tTone.extend(Tone.WaveShaper, Tone.SignalBase);\n\n\t/**\n\t *  Uses a mapping function to set the value of the curve.\n\t *  @param {function} mapping The function used to define the values.\n\t *                            The mapping function take two arguments:\n\t *                            the first is the value at the current position\n\t *                            which goes from -1 to 1 over the number of elements\n\t *                            in the curve array. The second argument is the array position.\n\t *  @returns {Tone.WaveShaper} this\n\t *  @example\n\t * //map the input signal from [-1, 1] to [0, 10]\n\t * shaper.setMap(function(val, index){\n\t * \treturn (val + 1) * 5;\n\t * })\n\t */\n\tTone.WaveShaper.prototype.setMap = function(mapping){\n\t\tvar array = new Array(this._curve.length);\n\t\tfor (var i = 0, len = this._curve.length; i < len; i++){\n\t\t\tvar normalized = (i / (len - 1)) * 2 - 1;\n\t\t\tarray[i] = mapping(normalized, i);\n\t\t}\n\t\tthis.curve = array;\n\t\treturn this;\n\t};\n\n\t/**\n\t * The array to set as the waveshaper curve. For linear curves\n\t * array length does not make much difference, but for complex curves\n\t * longer arrays will provide smoother interpolation.\n\t * @memberOf Tone.WaveShaper#\n\t * @type {Array}\n\t * @name curve\n\t */\n\tObject.defineProperty(Tone.WaveShaper.prototype, \"curve\", {\n\t\tget : function(){\n\t\t\treturn this._shaper.curve;\n\t\t},\n\t\tset : function(mapping){\n\t\t\tthis._curve = new Float32Array(mapping);\n\t\t\tthis._shaper.curve = this._curve;\n\t\t}\n\t});\n\n\t/**\n\t * Specifies what type of oversampling (if any) should be used when\n\t * applying the shaping curve. Can either be \"none\", \"2x\" or \"4x\".\n\t * @memberOf Tone.WaveShaper#\n\t * @type {string}\n\t * @name oversample\n\t */\n\tObject.defineProperty(Tone.WaveShaper.prototype, \"oversample\", {\n\t\tget : function(){\n\t\t\treturn this._shaper.oversample;\n\t\t},\n\t\tset : function(oversampling){\n\t\t\tif ([\"none\", \"2x\", \"4x\"].includes(oversampling)){\n\t\t\t\tthis._shaper.oversample = oversampling;\n\t\t\t} else {\n\t\t\t\tthrow new RangeError(\"Tone.WaveShaper: oversampling must be either 'none', '2x', or '4x'\");\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t *  Clean up.\n\t *  @returns {Tone.WaveShaper} this\n\t */\n\tTone.WaveShaper.prototype.dispose = function(){\n\t\tTone.SignalBase.prototype.dispose.call(this);\n\t\tthis._shaper.disconnect();\n\t\tthis._shaper = null;\n\t\tthis._curve = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.WaveShaper;\n});\n","module.exports = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\">\\n    <path d=\\\"M16.5 12c0-1.77-1.02-3.29-2.5-4.03v2.21l2.45 2.45c.03-.2.05-.41.05-.63zm2.5 0c0 .94-.2 1.82-.54 2.64l1.51 1.51C20.63 14.91 21 13.5 21 12c0-4.28-2.99-7.86-7-8.77v2.06c2.89.86 5 3.54 5 6.71zM4.27 3L3 4.27 7.73 9H3v6h4l5 5v-6.73l4.25 4.25c-.67.52-1.42.93-2.25 1.18v2.06c1.38-.31 2.63-.95 3.69-1.81L19.73 21 21 19.73l-9-9L4.27 3zM12 4L9.91 6.09 12 8.18V4z\\\"/>\\n    <!-- <path d=\\\"M0 0h24v24H0z\\\" fill=\\\"none\\\"/> -->\\n</svg>\\n\"","module.exports = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\">\\n    <path d=\\\"M3 9v6h4l5 5V4L7 9H3zm13.5 3c0-1.77-1.02-3.29-2.5-4.03v8.05c1.48-.73 2.5-2.25 2.5-4.02zM14 3.23v2.06c2.89.86 5 3.54 5 6.71s-2.11 5.85-5 6.71v2.06c4.01-.91 7-4.49 7-8.77s-2.99-7.86-7-8.77z\\\"/>\\n    <!-- <path d=\\\"M0 0h24v24H0z\\\" fill=\\\"none\\\"/> -->\\n</svg>\\n\"","import { EventEmitter } from 'events'\nimport volumeOn from '../images/volume-on.svg'\nimport volumeOff from '../images/volume-off.svg'\n\nexport class Toggle extends EventEmitter {\n\tconstructor(container){\n\t\tsuper()\n\n\t\t//create the element\n\t\tthis.element = document.createElement('button')\n\t\tthis.element.id = 'unmute-button'\n\t\tthis.element.setAttribute('aria-pressed', false)\n\t\tthis.element.setAttribute('aria-label', 'mute')\n\n\t\t//add it to the container\n\t\tif (container !== 'none'){\n\t\t\tcontainer.appendChild(this.element)\n\t\t}\n\n\t\t//forward the events\n\t\tthis.element.addEventListener('click', e => {\n\t\t\tthis.emit('click', e)\n\t\t})\n\n\t\t//set it to initially be muted\n\t\tthis.mute = true\n\t}\n\n\tget mute(){\n\t\treturn this.element.classList.contains('muted')\n\t}\n\n\tset mute(m){\n\t\tthis.element.setAttribute('aria-pressed', m)\n\t\tif (m){\n\t\t\tthis.element.classList.add('muted')\n\t\t\tthis.element.innerHTML = volumeOff\n\t\t} else {\n\t\t\tthis.element.classList.remove('muted')\n\t\t\tthis.element.innerHTML = volumeOn\n\t\t}\n\t}\n\n\tclick(){\n\t\tthis.element.click()\n\t}\n\n\t/**\n\t * Remove the element from the container\n\t */\n\tremove(){\n\t\tthis.element.remove()\n\t}\n}\n","import { EventEmitter } from 'events'\nimport Tone from 'tone/Tone/core/Tone'\nimport 'tone/Tone/shim/StereoPannerNode'\nimport 'tone/Tone/core/Context'\nimport 'tone/Tone/core/Master'\n\n/**\n * Wraps tone and handles mute/unmute and events\n */\nexport class Context extends EventEmitter {\n\tconstructor(context, mute, tone){\n\n\t\tsuper()\n\n\t\tif (tone && tone.context !== Tone.context){\n\t\t\tTone.context = tone.context\n\t\t} else if (context && context !== Tone.context){\n\t\t\tTone.context = context\n\t\t}\n\n\t\t/**\n\t\t * Reference to the wrapper context\n\t\t * @type {Tone.Context}\n\t\t */\n\t\tthis.context = Tone.context\n\n\t\t/**\n\t\t * Reference to the master output.\n\t\t * @type {Tone.Master}\n\t\t */\n\t\tif (tone && tone.Master !== Tone.Master){\n\t\t\tthis.master = tone.Master\n\t\t} else {\n\t\t\tthis.master = this.context.master\n\t\t}\n\n\t\t//add listeners\n\t\tthis.context.addEventListener('statechange', e => {\n\t\t\tthis.emit('statechange', e)\n\t\t})\n\n\t\t//set the initial muted state\n\t\tthis.master.mute = mute\n\n\t\tlet currentmute = this.mute\n\t\t//watch for if it's muted itself\n\t\tconst loop = () => {\n\t\t\trequestAnimationFrame(loop)\n\t\t\tif (this.mute !== currentmute){\n\t\t\t\tcurrentmute = this.mute\n\t\t\t\tthis.emit('mute', this.mute)\n\t\t\t}\n\t\t}\n\t\tloop()\n\t}\n\n\tget state(){\n\t\treturn this.context.state\n\t}\n\n\tget mute(){\n\t\treturn this.master.mute || this.state !== 'running'\n\t}\n\n\tset mute(m){\n\t\tif (this.state === 'running'){\n\t\t\tthis.master.mute = m\n\t\t}\n\t}\n\n\tresume(){\n\t\tif (Tone.supported && this.state !== 'running'){\n\t\t\treturn this.context.resume()\n\t\t} else {\n\t\t\treturn Promise.resolve()\n\t\t}\n\t}\n\n\t//promise which resolved when the context is started\n\tstarted(){\n\t\tif (this.state === 'running'){\n\t\t\treturn Promise.resolve()\n\t\t} else {\n\t\t\treturn new Promise(done => {\n\t\t\t\tthis.on('statechange', () => {\n\t\t\t\t\tif (this.state === 'running'){\n\t\t\t\t\t\tdone()\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t})\n\t\t}\n\t}\n\n\ttoggleMute(){\n\t\tthis.mute = !this.mute\n\t}\n}\n","const silentAudio = 'data:audio/mp3;base64,//MkxAAHiAICWABElBeKPL/RANb2w+yiT1g/gTok//lP/W/l3h8QO/OCdCqCW2Cw//MkxAQHkAIWUAhEmAQXWUOFW2dxPu//9mr60ElY5sseQ+xxesmHKtZr7bsqqX2L//MkxAgFwAYiQAhEAC2hq22d3///9FTV6tA36JdgBJoOGgc+7qvqej5Zu7/7uI9l//MkxBQHAAYi8AhEAO193vt9KGOq+6qcT7hhfN5FTInmwk8RkqKImTM55pRQHQSq//MkxBsGkgoIAABHhTACIJLf99nVI///yuW1uBqWfEu7CgNPWGpUadBmZ////4sL//MkxCMHMAH9iABEmAsKioqKigsLCwtVTEFNRTMuOTkuNVVVVVVVVVVVVVVVVVVV//MkxCkECAUYCAAAAFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV'\n\n/**\n * Plays a silent HTMLAudioElement which causes iOS to unmute even if the mute toggle is on\n */\nexport class AudioElement {\n\tconstructor(title){\n\n\t\tthis.element = document.createElement('audio')\n\t\tthis.element.controls = false\n\t\tthis.element.preload = 'auto'\n\t\tthis.element.loop = false\n\t\tthis.element.src = silentAudio\n\n\t\t//set the title that appears on iOS lock screen\n\t\tthis.element.title = title\n\t}\n\n\tclick(){\n\t\tthis.element.play()\n\t}\n}\n","/**\n * Handles case where the script is added to the top of the \n */\n\n//this is the script which loaded the UnmuteButton\nconst currentScript = document.currentScript\n\nexport function addButton(UnmuteButton){\n\tconst addButtonAttr = currentScript.getAttribute('data-add-button')\n\tif (currentScript && addButtonAttr === 'true'){\n\t\t//add it once the window is loaded\n\t\tconst mute = currentScript.getAttribute('data-mute') === 'true'\n\n\t\t//check if the document is already loaded\n\t\tif (document.readyState === 'complete'){\n\t\t\tUnmuteButton({ mute })\n\t\t} else {\n\t\t\t//otherwise add an event listener\n\t\t\twindow.addEventListener('load', () => UnmuteButton({ mute }))\n\t\t}\n\t}\n}\n\n","import { Toggle } from './Toggle'\nimport { Context } from './AudioContext'\nimport { EventEmitter } from 'events'\nimport { AudioElement } from './AudioElement'\nimport { addButton } from './ScriptElement'\nimport './unmute.scss'\n\n/**\n * @returns EventEmitter\n */\nclass Unmute extends EventEmitter {\n\tconstructor({ container=document.body, tone=window.Tone, context=(tone ? tone.context : null), title='Web Audio', mute=false } = {}){\n\t\tsuper()\n\n\t\t/**\n\t\t * The HTML element\n\t\t * @type {Toggle}\n\t\t */\n\t\tthis._button = new Toggle(container)\n\n\t\t/**\n\t\t * Controls the AudioContext\n\t\t * @type {Context}\n\t\t */\n\t\tthis._context = new Context(context, mute, tone)\n\n\t\t/**\n\t\t * AudioElement used to unsilence iOS\n\t\t * @type {AudioElement}\n\t\t */\n\t\tthis._audioElement = new AudioElement(title)\n\n\t\t//fwd events from the context\n\t\tthis._context.on('mute', m => {\n\t\t\tthis._button.mute = m\n\t\t\tthis.emit(m ? 'mute' : 'unmute')\n\t\t})\n\n\t\t//listen for click events\n\t\tthis._button.on('click', () => {\n\t\t\tif (this._context.state !== 'running'){\n\t\t\t\tthis.start()\n\t\t\t\tthis.emit('click')\n\t\t\t} else {\n\t\t\t\tthis._context.toggleMute()\n\t\t\t}\n\t\t})\n\n\t\t//listen for started change\n\t\tthis._context.started().then(() => {\n\t\t\tthis.emit('start')\n\t\t})\n\t\t\n\t\t//start out in the contexts current state\n\t\tthis._button.mute = this._context.mute\n\t}\n\n\t/**\n\t * the mute state of the button\n\t * @type {Boolean}\n\t */\n\tget mute(){\n\t\treturn this._context.mute\n\t}\n\n\tset mute(m){\n\t\tthis._button.mute = m\n\t\tthis._context.mute = m\n\t}\n\n\t/**\n\t * The HTML element\n\t * @type {HTMLElement}\n\t * @readOnly\n\t */\n\tget element(){\n\t\treturn this._button.element\n\t}\n\n\t/**\n\t * The AudioContext reference\n\t * @type {Tone.Context}\n\t * @readOnly\n\t */\n\tget context(){\n\t\treturn this._context.context\n\t}\n\n\t/**\n\t * remove the element from the container\n\t */\n\tremove(){\n\t\tthis._button.remove()\n\t}\n\n\t/**\n\t * Click on the element. Must come from a trusted MouseEvent to actually unmute the context\n\t */\n\tclick(){\n\t\tthis._button.click()\n\t}\n\n\t/**\n\t * Start the AudioContext. Must come from a trusted MouseEvent or keyboard event to actually unmute the context.\n\t */\n\tstart(){\n\t\tif (this._context.state !== 'running'){\n\t\t\tthis._context.resume()\n\t\t\tthis._audioElement.click()\n\t\t}\n\t}\n}\n\nexport function UnmuteButton(...args){\n\treturn new Unmute(...args)\n}\n\n//maybe the button automatically\naddButton(UnmuteButton)\n","\n/**\n * When source maps are enabled, `style-loader` uses a link element with a data-uri to\n * embed the css on the page. This breaks all relative urls because now they are relative to a\n * bundle instead of the current page.\n *\n * One solution is to only use full urls, but that may be impossible.\n *\n * Instead, this function \"fixes\" the relative urls to be absolute according to the current page location.\n *\n * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.\n *\n */\n\nmodule.exports = function (css) {\n  // get current location\n  var location = typeof window !== \"undefined\" && window.location;\n\n  if (!location) {\n    throw new Error(\"fixUrls requires window.location\");\n  }\n\n\t// blank or null?\n\tif (!css || typeof css !== \"string\") {\n\t  return css;\n  }\n\n  var baseUrl = location.protocol + \"//\" + location.host;\n  var currentDir = baseUrl + location.pathname.replace(/\\/[^\\/]*$/, \"/\");\n\n\t// convert each url(...)\n\t/*\n\tThis regular expression is just a way to recursively match brackets within\n\ta string.\n\n\t /url\\s*\\(  = Match on the word \"url\" with any whitespace after it and then a parens\n\t   (  = Start a capturing group\n\t     (?:  = Start a non-capturing group\n\t         [^)(]  = Match anything that isn't a parentheses\n\t         |  = OR\n\t         \\(  = Match a start parentheses\n\t             (?:  = Start another non-capturing groups\n\t                 [^)(]+  = Match anything that isn't a parentheses\n\t                 |  = OR\n\t                 \\(  = Match a start parentheses\n\t                     [^)(]*  = Match anything that isn't a parentheses\n\t                 \\)  = Match a end parentheses\n\t             )  = End Group\n              *\\) = Match anything and then a close parens\n          )  = Close non-capturing group\n          *  = Match anything\n       )  = Close capturing group\n\t \\)  = Match a close parens\n\n\t /gi  = Get all matches, not the first.  Be case insensitive.\n\t */\n\tvar fixedCss = css.replace(/url\\s*\\(((?:[^)(]|\\((?:[^)(]+|\\([^)(]*\\))*\\))*)\\)/gi, function(fullMatch, origUrl) {\n\t\t// strip quotes (if they exist)\n\t\tvar unquotedOrigUrl = origUrl\n\t\t\t.trim()\n\t\t\t.replace(/^\"(.*)\"$/, function(o, $1){ return $1; })\n\t\t\t.replace(/^'(.*)'$/, function(o, $1){ return $1; });\n\n\t\t// already a full url? no change\n\t\tif (/^(#|data:|http:\\/\\/|https:\\/\\/|file:\\/\\/\\/|\\s*$)/i.test(unquotedOrigUrl)) {\n\t\t  return fullMatch;\n\t\t}\n\n\t\t// convert the url to a full url\n\t\tvar newUrl;\n\n\t\tif (unquotedOrigUrl.indexOf(\"//\") === 0) {\n\t\t  \t//TODO: should we add protocol?\n\t\t\tnewUrl = unquotedOrigUrl;\n\t\t} else if (unquotedOrigUrl.indexOf(\"/\") === 0) {\n\t\t\t// path should be relative to the base url\n\t\t\tnewUrl = baseUrl + unquotedOrigUrl; // already starts with '/'\n\t\t} else {\n\t\t\t// path should be relative to current directory\n\t\t\tnewUrl = currentDir + unquotedOrigUrl.replace(/^\\.\\//, \"\"); // Strip leading './'\n\t\t}\n\n\t\t// send back the fixed url(...)\n\t\treturn \"url(\" + JSON.stringify(newUrl) + \")\";\n\t});\n\n\t// send back the fixed css\n\treturn fixedCss;\n};\n","/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\nvar stylesInDom = {};\n\nvar\tmemoize = function (fn) {\n\tvar memo;\n\n\treturn function () {\n\t\tif (typeof memo === \"undefined\") memo = fn.apply(this, arguments);\n\t\treturn memo;\n\t};\n};\n\nvar isOldIE = memoize(function () {\n\t// Test for IE <= 9 as proposed by Browserhacks\n\t// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n\t// Tests for existence of standard globals is to allow style-loader\n\t// to operate correctly into non-standard environments\n\t// @see https://github.com/webpack-contrib/style-loader/issues/177\n\treturn window && document && document.all && !window.atob;\n});\n\nvar getTarget = function (target) {\n  return document.querySelector(target);\n};\n\nvar getElement = (function (fn) {\n\tvar memo = {};\n\n\treturn function(target) {\n                // If passing function in options, then use it for resolve \"head\" element.\n                // Useful for Shadow Root style i.e\n                // {\n                //   insertInto: function () { return document.querySelector(\"#foo\").shadowRoot }\n                // }\n                if (typeof target === 'function') {\n                        return target();\n                }\n                if (typeof memo[target] === \"undefined\") {\n\t\t\tvar styleTarget = getTarget.call(this, target);\n\t\t\t// Special case to return head of iframe instead of iframe itself\n\t\t\tif (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n\t\t\t\ttry {\n\t\t\t\t\t// This will throw an exception if access to iframe is blocked\n\t\t\t\t\t// due to cross-origin restrictions\n\t\t\t\t\tstyleTarget = styleTarget.contentDocument.head;\n\t\t\t\t} catch(e) {\n\t\t\t\t\tstyleTarget = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\tmemo[target] = styleTarget;\n\t\t}\n\t\treturn memo[target]\n\t};\n})();\n\nvar singleton = null;\nvar\tsingletonCounter = 0;\nvar\tstylesInsertedAtTop = [];\n\nvar\tfixUrls = require(\"./urls\");\n\nmodule.exports = function(list, options) {\n\tif (typeof DEBUG !== \"undefined\" && DEBUG) {\n\t\tif (typeof document !== \"object\") throw new Error(\"The style-loader cannot be used in a non-browser environment\");\n\t}\n\n\toptions = options || {};\n\n\toptions.attrs = typeof options.attrs === \"object\" ? options.attrs : {};\n\n\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n\t// tags it will allow on a page\n\tif (!options.singleton && typeof options.singleton !== \"boolean\") options.singleton = isOldIE();\n\n\t// By default, add <style> tags to the <head> element\n        if (!options.insertInto) options.insertInto = \"head\";\n\n\t// By default, add <style> tags to the bottom of the target\n\tif (!options.insertAt) options.insertAt = \"bottom\";\n\n\tvar styles = listToStyles(list, options);\n\n\taddStylesToDom(styles, options);\n\n\treturn function update (newList) {\n\t\tvar mayRemove = [];\n\n\t\tfor (var i = 0; i < styles.length; i++) {\n\t\t\tvar item = styles[i];\n\t\t\tvar domStyle = stylesInDom[item.id];\n\n\t\t\tdomStyle.refs--;\n\t\t\tmayRemove.push(domStyle);\n\t\t}\n\n\t\tif(newList) {\n\t\t\tvar newStyles = listToStyles(newList, options);\n\t\t\taddStylesToDom(newStyles, options);\n\t\t}\n\n\t\tfor (var i = 0; i < mayRemove.length; i++) {\n\t\t\tvar domStyle = mayRemove[i];\n\n\t\t\tif(domStyle.refs === 0) {\n\t\t\t\tfor (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();\n\n\t\t\t\tdelete stylesInDom[domStyle.id];\n\t\t\t}\n\t\t}\n\t};\n};\n\nfunction addStylesToDom (styles, options) {\n\tfor (var i = 0; i < styles.length; i++) {\n\t\tvar item = styles[i];\n\t\tvar domStyle = stylesInDom[item.id];\n\n\t\tif(domStyle) {\n\t\t\tdomStyle.refs++;\n\n\t\t\tfor(var j = 0; j < domStyle.parts.length; j++) {\n\t\t\t\tdomStyle.parts[j](item.parts[j]);\n\t\t\t}\n\n\t\t\tfor(; j < item.parts.length; j++) {\n\t\t\t\tdomStyle.parts.push(addStyle(item.parts[j], options));\n\t\t\t}\n\t\t} else {\n\t\t\tvar parts = [];\n\n\t\t\tfor(var j = 0; j < item.parts.length; j++) {\n\t\t\t\tparts.push(addStyle(item.parts[j], options));\n\t\t\t}\n\n\t\t\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\n\t\t}\n\t}\n}\n\nfunction listToStyles (list, options) {\n\tvar styles = [];\n\tvar newStyles = {};\n\n\tfor (var i = 0; i < list.length; i++) {\n\t\tvar item = list[i];\n\t\tvar id = options.base ? item[0] + options.base : item[0];\n\t\tvar css = item[1];\n\t\tvar media = item[2];\n\t\tvar sourceMap = item[3];\n\t\tvar part = {css: css, media: media, sourceMap: sourceMap};\n\n\t\tif(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});\n\t\telse newStyles[id].parts.push(part);\n\t}\n\n\treturn styles;\n}\n\nfunction insertStyleElement (options, style) {\n\tvar target = getElement(options.insertInto)\n\n\tif (!target) {\n\t\tthrow new Error(\"Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.\");\n\t}\n\n\tvar lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];\n\n\tif (options.insertAt === \"top\") {\n\t\tif (!lastStyleElementInsertedAtTop) {\n\t\t\ttarget.insertBefore(style, target.firstChild);\n\t\t} else if (lastStyleElementInsertedAtTop.nextSibling) {\n\t\t\ttarget.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);\n\t\t} else {\n\t\t\ttarget.appendChild(style);\n\t\t}\n\t\tstylesInsertedAtTop.push(style);\n\t} else if (options.insertAt === \"bottom\") {\n\t\ttarget.appendChild(style);\n\t} else if (typeof options.insertAt === \"object\" && options.insertAt.before) {\n\t\tvar nextSibling = getElement(options.insertInto + \" \" + options.insertAt.before);\n\t\ttarget.insertBefore(style, nextSibling);\n\t} else {\n\t\tthrow new Error(\"[Style Loader]\\n\\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\\n Must be 'top', 'bottom', or Object.\\n (https://github.com/webpack-contrib/style-loader#insertat)\\n\");\n\t}\n}\n\nfunction removeStyleElement (style) {\n\tif (style.parentNode === null) return false;\n\tstyle.parentNode.removeChild(style);\n\n\tvar idx = stylesInsertedAtTop.indexOf(style);\n\tif(idx >= 0) {\n\t\tstylesInsertedAtTop.splice(idx, 1);\n\t}\n}\n\nfunction createStyleElement (options) {\n\tvar style = document.createElement(\"style\");\n\n\tif(options.attrs.type === undefined) {\n\t\toptions.attrs.type = \"text/css\";\n\t}\n\n\taddAttrs(style, options.attrs);\n\tinsertStyleElement(options, style);\n\n\treturn style;\n}\n\nfunction createLinkElement (options) {\n\tvar link = document.createElement(\"link\");\n\n\tif(options.attrs.type === undefined) {\n\t\toptions.attrs.type = \"text/css\";\n\t}\n\toptions.attrs.rel = \"stylesheet\";\n\n\taddAttrs(link, options.attrs);\n\tinsertStyleElement(options, link);\n\n\treturn link;\n}\n\nfunction addAttrs (el, attrs) {\n\tObject.keys(attrs).forEach(function (key) {\n\t\tel.setAttribute(key, attrs[key]);\n\t});\n}\n\nfunction addStyle (obj, options) {\n\tvar style, update, remove, result;\n\n\t// If a transform function was defined, run it on the css\n\tif (options.transform && obj.css) {\n\t    result = options.transform(obj.css);\n\n\t    if (result) {\n\t    \t// If transform returns a value, use that instead of the original css.\n\t    \t// This allows running runtime transformations on the css.\n\t    \tobj.css = result;\n\t    } else {\n\t    \t// If the transform function returns a falsy value, don't add this css.\n\t    \t// This allows conditional loading of css\n\t    \treturn function() {\n\t    \t\t// noop\n\t    \t};\n\t    }\n\t}\n\n\tif (options.singleton) {\n\t\tvar styleIndex = singletonCounter++;\n\n\t\tstyle = singleton || (singleton = createStyleElement(options));\n\n\t\tupdate = applyToSingletonTag.bind(null, style, styleIndex, false);\n\t\tremove = applyToSingletonTag.bind(null, style, styleIndex, true);\n\n\t} else if (\n\t\tobj.sourceMap &&\n\t\ttypeof URL === \"function\" &&\n\t\ttypeof URL.createObjectURL === \"function\" &&\n\t\ttypeof URL.revokeObjectURL === \"function\" &&\n\t\ttypeof Blob === \"function\" &&\n\t\ttypeof btoa === \"function\"\n\t) {\n\t\tstyle = createLinkElement(options);\n\t\tupdate = updateLink.bind(null, style, options);\n\t\tremove = function () {\n\t\t\tremoveStyleElement(style);\n\n\t\t\tif(style.href) URL.revokeObjectURL(style.href);\n\t\t};\n\t} else {\n\t\tstyle = createStyleElement(options);\n\t\tupdate = applyToTag.bind(null, style);\n\t\tremove = function () {\n\t\t\tremoveStyleElement(style);\n\t\t};\n\t}\n\n\tupdate(obj);\n\n\treturn function updateStyle (newObj) {\n\t\tif (newObj) {\n\t\t\tif (\n\t\t\t\tnewObj.css === obj.css &&\n\t\t\t\tnewObj.media === obj.media &&\n\t\t\t\tnewObj.sourceMap === obj.sourceMap\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tupdate(obj = newObj);\n\t\t} else {\n\t\t\tremove();\n\t\t}\n\t};\n}\n\nvar replaceText = (function () {\n\tvar textStore = [];\n\n\treturn function (index, replacement) {\n\t\ttextStore[index] = replacement;\n\n\t\treturn textStore.filter(Boolean).join('\\n');\n\t};\n})();\n\nfunction applyToSingletonTag (style, index, remove, obj) {\n\tvar css = remove ? \"\" : obj.css;\n\n\tif (style.styleSheet) {\n\t\tstyle.styleSheet.cssText = replaceText(index, css);\n\t} else {\n\t\tvar cssNode = document.createTextNode(css);\n\t\tvar childNodes = style.childNodes;\n\n\t\tif (childNodes[index]) style.removeChild(childNodes[index]);\n\n\t\tif (childNodes.length) {\n\t\t\tstyle.insertBefore(cssNode, childNodes[index]);\n\t\t} else {\n\t\t\tstyle.appendChild(cssNode);\n\t\t}\n\t}\n}\n\nfunction applyToTag (style, obj) {\n\tvar css = obj.css;\n\tvar media = obj.media;\n\n\tif(media) {\n\t\tstyle.setAttribute(\"media\", media)\n\t}\n\n\tif(style.styleSheet) {\n\t\tstyle.styleSheet.cssText = css;\n\t} else {\n\t\twhile(style.firstChild) {\n\t\t\tstyle.removeChild(style.firstChild);\n\t\t}\n\n\t\tstyle.appendChild(document.createTextNode(css));\n\t}\n}\n\nfunction updateLink (link, options, obj) {\n\tvar css = obj.css;\n\tvar sourceMap = obj.sourceMap;\n\n\t/*\n\t\tIf convertToAbsoluteUrls isn't defined, but sourcemaps are enabled\n\t\tand there is no publicPath defined then lets turn convertToAbsoluteUrls\n\t\ton by default.  Otherwise default to the convertToAbsoluteUrls option\n\t\tdirectly\n\t*/\n\tvar autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;\n\n\tif (options.convertToAbsoluteUrls || autoFixUrls) {\n\t\tcss = fixUrls(css);\n\t}\n\n\tif (sourceMap) {\n\t\t// http://stackoverflow.com/a/26603875\n\t\tcss += \"\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \" */\";\n\t}\n\n\tvar blob = new Blob([css], { type: \"text/css\" });\n\n\tvar oldSrc = link.href;\n\n\tlink.href = URL.createObjectURL(blob);\n\n\tif(oldSrc) URL.revokeObjectURL(oldSrc);\n}\n","/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\nmodule.exports = function(useSourceMap) {\n\tvar list = [];\n\n\t// return the list of modules as css string\n\tlist.toString = function toString() {\n\t\treturn this.map(function (item) {\n\t\t\tvar content = cssWithMappingToString(item, useSourceMap);\n\t\t\tif(item[2]) {\n\t\t\t\treturn \"@media \" + item[2] + \"{\" + content + \"}\";\n\t\t\t} else {\n\t\t\t\treturn content;\n\t\t\t}\n\t\t}).join(\"\");\n\t};\n\n\t// import a list of modules into the list\n\tlist.i = function(modules, mediaQuery) {\n\t\tif(typeof modules === \"string\")\n\t\t\tmodules = [[null, modules, \"\"]];\n\t\tvar alreadyImportedModules = {};\n\t\tfor(var i = 0; i < this.length; i++) {\n\t\t\tvar id = this[i][0];\n\t\t\tif(typeof id === \"number\")\n\t\t\t\talreadyImportedModules[id] = true;\n\t\t}\n\t\tfor(i = 0; i < modules.length; i++) {\n\t\t\tvar item = modules[i];\n\t\t\t// skip already imported module\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\n\t\t\t//  when a module is imported multiple times with different media queries.\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\n\t\t\t\tif(mediaQuery && !item[2]) {\n\t\t\t\t\titem[2] = mediaQuery;\n\t\t\t\t} else if(mediaQuery) {\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\n\t\t\t\t}\n\t\t\t\tlist.push(item);\n\t\t\t}\n\t\t}\n\t};\n\treturn list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n\tvar content = item[1] || '';\n\tvar cssMapping = item[3];\n\tif (!cssMapping) {\n\t\treturn content;\n\t}\n\n\tif (useSourceMap && typeof btoa === 'function') {\n\t\tvar sourceMapping = toComment(cssMapping);\n\t\tvar sourceURLs = cssMapping.sources.map(function (source) {\n\t\t\treturn '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'\n\t\t});\n\n\t\treturn [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n\t}\n\n\treturn [content].join('\\n');\n}\n\n// Adapted from convert-source-map (MIT)\nfunction toComment(sourceMap) {\n\t// eslint-disable-next-line no-undef\n\tvar base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n\tvar data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;\n\n\treturn '/*# ' + data + ' */';\n}\n","exports = module.exports = require(\"../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"#unmute-button{--unmute-margin:8px;--unmute-size:24px;position:fixed;right:var(--unmute-margin);top:var(--unmute-margin);border-radius:50%;width:var(--unmute-size);height:var(--unmute-size);background-color:transparent;border:none;cursor:pointer}#unmute-button svg{position:absolute;left:0;top:0;width:100%;height:100%}\", \"\"]);\n\n// exports\n","\nvar content = require(\"!!../node_modules/css-loader/index.js!../node_modules/sass-loader/lib/loader.js!./unmute.scss\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../node_modules/css-loader/index.js!../node_modules/sass-loader/lib/loader.js!./unmute.scss\", function() {\n\t\tvar newContent = require(\"!!../node_modules/css-loader/index.js!../node_modules/sass-loader/lib/loader.js!./unmute.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","define([\"../core/Tone\", \"../signal/Signal\", \"../core/Gain\", \"../core/AudioNode\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class Tone.Volume is a simple volume node, useful for creating a volume fader.\n\t *\n\t *  @extends {Tone.AudioNode}\n\t *  @constructor\n\t *  @param {Decibels} [volume=0] the initial volume\n\t *  @example\n\t * var vol = new Tone.Volume(-12);\n\t * instrument.chain(vol, Tone.Master);\n\t */\n\tTone.Volume = function(){\n\n\t\tvar options = Tone.defaults(arguments, [\"volume\"], Tone.Volume);\n\t\tTone.AudioNode.call(this, options);\n\n\t\t/**\n\t\t * the output node\n\t\t * @type {GainNode}\n\t\t * @private\n\t\t */\n\t\tthis.output = this.input = new Tone.Gain(options.volume, Tone.Type.Decibels);\n\n\t\t/**\n\t\t * The unmuted volume\n\t\t * @type {Decibels}\n\t\t * @private\n\t\t */\n\t\tthis._unmutedVolume = options.volume;\n\n\t\t/**\n\t\t *  The volume control in decibels.\n\t\t *  @type {Decibels}\n\t\t *  @signal\n\t\t */\n\t\tthis.volume = this.output.gain;\n\n\t\tthis._readOnly(\"volume\");\n\n\t\t//set the mute initially\n\t\tthis.mute = options.mute;\n\t};\n\n\tTone.extend(Tone.Volume, Tone.AudioNode);\n\n\t/**\n\t *  Defaults\n\t *  @type  {Object}\n\t *  @const\n\t *  @static\n\t */\n\tTone.Volume.defaults = {\n\t\t\"volume\" : 0,\n\t\t\"mute\" : false\n\t};\n\n\t/**\n\t * Mute the output.\n\t * @memberOf Tone.Volume#\n\t * @type {boolean}\n\t * @name mute\n\t * @example\n\t * //mute the output\n\t * volume.mute = true;\n\t */\n\tObject.defineProperty(Tone.Volume.prototype, \"mute\", {\n\t\tget : function(){\n\t\t\treturn this.volume.value === -Infinity;\n\t\t},\n\t\tset : function(mute){\n\t\t\tif (!this.mute && mute){\n\t\t\t\tthis._unmutedVolume = this.volume.value;\n\t\t\t\t//maybe it should ramp here?\n\t\t\t\tthis.volume.value = -Infinity;\n\t\t\t} else if (this.mute && !mute){\n\t\t\t\tthis.volume.value = this._unmutedVolume;\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t *  clean up\n\t *  @returns {Tone.Volume} this\n\t */\n\tTone.Volume.prototype.dispose = function(){\n\t\tthis.input.dispose();\n\t\tTone.AudioNode.prototype.dispose.call(this);\n\t\tthis._writable(\"volume\");\n\t\tthis.volume.dispose();\n\t\tthis.volume = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.Volume;\n});\n","define([\"../core/Tone\", \"../component/Volume\", \"../core/Context\", \"../core/AudioNode\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class  A single master output which is connected to the\n\t *          AudioDestinationNode (aka your speakers).\n\t *          It provides useful conveniences such as the ability\n\t *          to set the volume and mute the entire application.\n\t *          It also gives you the ability to apply master effects to your application.\n\t *          <br><br>\n\t *          Like Tone.Transport, A single Tone.Master is created\n\t *          on initialization and you do not need to explicitly construct one.\n\t *\n\t *  @constructor\n\t *  @extends {Tone}\n\t *  @singleton\n\t *  @example\n\t * //the audio will go from the oscillator to the speakers\n\t * oscillator.connect(Tone.Master);\n\t * //a convenience for connecting to the master output is also provided:\n\t * oscillator.toMaster();\n\t * //the above two examples are equivalent.\n\t */\n\tTone.Master = function(){\n\n\t\tTone.AudioNode.call(this);\n\t\tTone.getContext(function(){\n\t\t\tthis.createInsOuts(1, 0);\n\n\t\t\t/**\n\t\t\t *  The private volume node\n\t\t\t *  @type  {Tone.Volume}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._volume = this.output = new Tone.Volume();\n\n\t\t\t/**\n\t\t\t * The volume of the master output.\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t */\n\t\t\tthis.volume = this._volume.volume;\n\n\t\t\tthis._readOnly(\"volume\");\n\t\t\t//connections\n\t\t\tthis.input.chain(this.output, this.context.destination);\n\n\t\t\t//master is a singleton so it adds itself to the context\n\t\t\tthis.context.master = this;\n\t\t}.bind(this));\n\t};\n\n\tTone.extend(Tone.Master, Tone.AudioNode);\n\n\t/**\n\t *  @type {Object}\n\t *  @const\n\t */\n\tTone.Master.defaults = {\n\t\t\"volume\" : 0,\n\t\t\"mute\" : false\n\t};\n\n\t/**\n\t * Is an instanceof Tone.Master\n\t * @type {Boolean}\n\t */\n\tTone.Master.prototype.isMaster = true;\n\n\t/**\n\t * Mute the output.\n\t * @memberOf Tone.Master#\n\t * @type {boolean}\n\t * @name mute\n\t * @example\n\t * //mute the output\n\t * Tone.Master.mute = true;\n\t */\n\tObject.defineProperty(Tone.Master.prototype, \"mute\", {\n\t\tget : function(){\n\t\t\treturn this._volume.mute;\n\t\t},\n\t\tset : function(mute){\n\t\t\tthis._volume.mute = mute;\n\t\t}\n\t});\n\n\t/**\n\t *  Add a master effects chain. NOTE: this will disconnect any nodes which were previously\n\t *  chained in the master effects chain.\n\t *  @param {AudioNode|Tone} args... All arguments will be connected in a row\n\t *                                  and the Master will be routed through it.\n\t *  @return  {Tone.Master}  this\n\t *  @example\n\t * //some overall compression to keep the levels in check\n\t * var masterCompressor = new Tone.Compressor({\n\t * \t\"threshold\" : -6,\n\t * \t\"ratio\" : 3,\n\t * \t\"attack\" : 0.5,\n\t * \t\"release\" : 0.1\n\t * });\n\t * //give a little boost to the lows\n\t * var lowBump = new Tone.Filter(200, \"lowshelf\");\n\t * //route everything through the filter\n\t * //and compressor before going to the speakers\n\t * Tone.Master.chain(lowBump, masterCompressor);\n\t */\n\tTone.Master.prototype.chain = function(){\n\t\tthis.input.disconnect();\n\t\tthis.input.chain.apply(this.input, arguments);\n\t\targuments[arguments.length - 1].connect(this.output);\n\t};\n\n\t/**\n\t *  Clean up\n\t *  @return  {Tone.Master}  this\n\t */\n\tTone.Master.prototype.dispose = function(){\n\t\tTone.AudioNode.prototype.dispose.call(this);\n\t\tthis._writable(\"volume\");\n\t\tthis._volume.dispose();\n\t\tthis._volume = null;\n\t\tthis.volume = null;\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////\n\t//\tAUGMENT TONE's PROTOTYPE\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Connect 'this' to the master output. Shorthand for this.connect(Tone.Master)\n\t *  @returns {Tone.AudioNode} this\n\t *  @example\n\t * //connect an oscillator to the master output\n\t * var osc = new Tone.Oscillator().toMaster();\n\t */\n\tTone.AudioNode.prototype.toMaster = function(){\n\t\tthis.connect(this.context.master);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  initialize the module and listen for new audio contexts\n\t */\n\tvar MasterConstructor = Tone.Master;\n\tTone.Master = new MasterConstructor();\n\n\tTone.Context.on(\"init\", function(context){\n\t\t// if it already exists, just restore it\n\t\tif (context.master && context.master.isMaster){\n\t\t\tTone.Master = context.master;\n\t\t} else {\n\t\t\tTone.Master = new MasterConstructor();\n\t\t}\n\t});\n\n\tTone.Context.on(\"close\", function(context){\n\t\tif (context.master && context.master.isMaster){\n\t\t\tcontext.master.dispose();\n\t\t}\n\t});\n\n\treturn Tone.Master;\n});\n","define([\"../core/Tone\", \"../core/Context\", \"../shim/OfflineAudioContext\"], function(Tone){\n\n\t/**\n\t *  @class Wrapper around the OfflineAudioContext\n\t *  @extends {Tone.Context}\n\t *  @param  {Number}  channels  The number of channels to render\n\t *  @param  {Number}  duration  The duration to render in samples\n\t *  @param {Number} sampleRate the sample rate to render at\n\t */\n\tTone.OfflineContext = function(channels, duration, sampleRate){\n\n\t\t/**\n\t\t *  The offline context\n\t\t *  @private\n\t\t *  @type  {OfflineAudioContext}\n\t\t */\n\t\tvar offlineContext = new OfflineAudioContext(channels, duration * sampleRate, sampleRate);\n\n\t\t//wrap the methods/members\n\t\tTone.Context.call(this, {\n\t\t\t\"context\" : offlineContext,\n\t\t\t\"clockSource\" : \"offline\",\n\t\t\t\"lookAhead\" : 0,\n\t\t\t\"updateInterval\" : 128 / sampleRate\n\t\t});\n\n\t\t/**\n\t\t *  A private reference to the duration\n\t\t *  @private\n\t\t *  @type  {Number}\n\t\t */\n\t\tthis._duration = duration;\n\n\t\t/**\n\t\t *  An artificial clock source\n\t\t *  @type  {Number}\n\t\t *  @private\n\t\t */\n\t\tthis._currentTime = 0;\n\t};\n\n\tTone.extend(Tone.OfflineContext, Tone.Context);\n\n\t/**\n\t *  Override the now method to point to the internal clock time\n\t *  @return  {Number}\n\t */\n\tTone.OfflineContext.prototype.now = function(){\n\t\treturn this._currentTime;\n\t};\n\n\t/**\n\t *  Overwrite resume, should not do anything in the OfflineAudioContext.\n\t *  @return {Promise}\n\t */\n\tTone.OfflineContext.prototype.resume = function(){\n\t\treturn Promise.resolve();\n\t};\n\n\t/**\n\t *  Render the output of the OfflineContext\n\t *  @return  {Promise}\n\t */\n\tTone.OfflineContext.prototype.render = function(){\n\t\twhile (this._duration - this._currentTime >= 0){\n\t\t\t//invoke all the callbacks on that time\n\t\t\tthis.emit(\"tick\");\n\t\t\t//increment the clock\n\t\t\tthis._currentTime += this.blockTime;\n\t\t}\n\n\t\treturn this._context.startRendering();\n\t};\n\n\t/**\n\t *  Close the context\n\t *  @return  {Promise}\n\t */\n\tTone.OfflineContext.prototype.close = function(){\n\t\tthis._context = null;\n\t\treturn Promise.resolve();\n\t};\n\n\treturn Tone.OfflineContext;\n});\n","define([\"../core/Tone\", \"../core/OfflineContext\"], function(Tone){\n\n\tif (Tone.supported){\n\n\t\tvar ua = navigator.userAgent.toLowerCase();\n\t\tvar isMobileSafari = ua.includes(\"safari\") && !ua.includes(\"chrome\") && ua.includes(\"mobile\");\n\t\tif (isMobileSafari){\n\t\t\t//mobile safari has a bizarre bug with the offline context\n\t\t\t//when a BufferSourceNode is started, it starts the offline context\n\t\t\t//\n\t\t\t//deferring all BufferSource starts till the last possible moment\n\t\t\t//reduces the likelihood of this happening\n\t\t\tTone.OfflineContext.prototype.createBufferSource = function(){\n\t\t\t\tvar bufferSource = this._context.createBufferSource();\n\t\t\t\tvar _native_start = bufferSource.start;\n\t\t\t\tbufferSource.start = function(time){\n\t\t\t\t\tthis.setTimeout(function(){\n\t\t\t\t\t\t_native_start.call(bufferSource, time);\n\t\t\t\t\t}.bind(this), 0);\n\t\t\t\t}.bind(this);\n\t\t\t\treturn bufferSource;\n\t\t\t};\n\t\t}\n\t}\n\n});\n","define([\"../core/Tone\", \"../shim/AudioContext\", \"../shim/BufferSourceNode\",\n\t\"../core/Context\", \"../core/Gain\"], function(Tone){\n\n\tif (Tone.supported && !Tone.global.AudioContext.prototype.createConstantSource){\n\n\t\tvar ConstantSourceNode = function(context){\n\t\t\tthis.context = context;\n\n\t\t\tvar buffer = context.createBuffer(1, 128, context.sampleRate);\n\t\t\tvar arr = buffer.getChannelData(0);\n\t\t\tfor (var i = 0; i < arr.length; i++){\n\t\t\t\tarr[i] = 1;\n\t\t\t}\n\n\t\t\tthis._bufferSource = context.createBufferSource();\n\t\t\tthis._bufferSource.channelCount = 1;\n\t\t\tthis._bufferSource.channelCountMode = \"explicit\";\n\t\t\tthis._bufferSource.buffer = buffer;\n\t\t\tthis._bufferSource.loop = true;\n\n\t\t\tvar gainNode = this._output = context.createGain();\n\t\t\tthis.offset = gainNode.gain;\n\n\t\t\tthis._bufferSource.connect(gainNode);\n\t\t};\n\n\t\tConstantSourceNode.prototype.start = function(time){\n\t\t\tthis._bufferSource.start(time);\n\t\t\treturn this;\n\t\t};\n\n\t\tConstantSourceNode.prototype.stop = function(time){\n\t\t\tthis._bufferSource.stop(time);\n\t\t\treturn this;\n\t\t};\n\n\t\tConstantSourceNode.prototype.connect = function(){\n\t\t\tthis._output.connect.apply(this._output, arguments);\n\t\t\treturn this;\n\t\t};\n\n\t\tConstantSourceNode.prototype.disconnect = function(){\n\t\t\tthis._output.disconnect.apply(this._output, arguments);\n\t\t\treturn this;\n\t\t};\n\n\t\tAudioContext.prototype.createConstantSource = function(){\n\t\t\treturn new ConstantSourceNode(this);\n\t\t};\n\n\t\tTone.Context.prototype.createConstantSource = function(){\n\t\t\treturn new ConstantSourceNode(this);\n\t\t};\n\t}\n});\n","define([\"../core/Tone\", \"../core/Gain\", \"../core/AudioNode\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *\t@class  Tone.Split splits an incoming signal into left and right channels.\n\t *\n\t *  @constructor\n\t *  @extends {Tone.AudioNode}\n\t *  @example\n\t * var split = new Tone.Split();\n\t * stereoSignal.connect(split);\n\t */\n\tTone.Split = function(){\n\n\t\tTone.AudioNode.call(this);\n\t\tthis.createInsOuts(0, 2);\n\n\t\t/**\n\t\t *  @type {ChannelSplitterNode}\n\t\t *  @private\n\t\t */\n\t\tthis._splitter = this.input = this.context.createChannelSplitter(2);\n\n\t\t/**\n\t\t *  Left channel output.\n\t\t *  Alias for <code>output[0]</code>\n\t\t *  @type {Tone.Gain}\n\t\t */\n\t\tthis.left = this.output[0] = new Tone.Gain();\n\n\t\t/**\n\t\t *  Right channel output.\n\t\t *  Alias for <code>output[1]</code>\n\t\t *  @type {Tone.Gain}\n\t\t */\n\t\tthis.right = this.output[1] = new Tone.Gain();\n\n\t\t//connections\n\t\tthis._splitter.connect(this.left, 0, 0);\n\t\tthis._splitter.connect(this.right, 1, 0);\n\t};\n\n\tTone.extend(Tone.Split, Tone.AudioNode);\n\n\t/**\n\t *  Clean up.\n\t *  @returns {Tone.Split} this\n\t */\n\tTone.Split.prototype.dispose = function(){\n\t\tTone.AudioNode.prototype.dispose.call(this);\n\t\tthis._splitter.disconnect();\n\t\tthis.left.dispose();\n\t\tthis.left = null;\n\t\tthis.right.dispose();\n\t\tthis.right = null;\n\t\tthis._splitter = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.Split;\n});\n","define([\"../core/Tone\", \"../type/Time\"], function(Tone){\n\n\t/**\n\t *  @class Tone.TransportTime is a the time along the Transport's\n\t *         timeline. It is similar to Tone.Time, but instead of evaluating\n\t *         against the AudioContext's clock, it is evaluated against\n\t *         the Transport's position. See [TransportTime wiki](https://github.com/Tonejs/Tone.js/wiki/TransportTime).\n\t *  @constructor\n\t *  @param  {Time}  val    The time value as a number or string\n\t *  @param  {String=}  units  Unit values\n\t *  @extends {Tone.Time}\n\t */\n\tTone.TransportTime = function(val, units){\n\t\tif (this instanceof Tone.TransportTime){\n\n\t\t\tTone.Time.call(this, val, units);\n\n\t\t} else {\n\t\t\treturn new Tone.TransportTime(val, units);\n\t\t}\n\t};\n\n\tTone.extend(Tone.TransportTime, Tone.Time);\n\n\t/**\n\t * Return the current time in whichever context is relevant\n\t * @type {Number}\n\t * @private\n\t */\n\tTone.TransportTime.prototype._now = function(){\n\t\treturn Tone.Transport.seconds;\n\t};\n\n\treturn Tone.TransportTime;\n});\n","define([\"../core/Tone\", \"../core/Gain\", \"../signal/SignalBase\"], function(Tone){\n\n\t/**\n\t *  @class Tone.Zero outputs 0's at audio-rate. The reason this has to be\n\t *         it's own class is that many browsers optimize out Tone.Signal\n\t *         with a value of 0 and will not process nodes further down the graph.\n\t *  @extends {Tone.SignalBase}\n\t */\n\tTone.Zero = function(){\n\n\t\tTone.SignalBase.call(this);\n\n\t\t/**\n\t\t *  The gain node\n\t\t *  @type  {Tone.Gain}\n\t\t *  @private\n\t\t */\n\t\tthis._gain = this.input = this.output = new Tone.Gain();\n\n\t\tthis.context.getConstant(0).connect(this._gain);\n\t};\n\n\tTone.extend(Tone.Zero, Tone.SignalBase);\n\n\t/**\n\t *  clean up\n\t *  @return  {Tone.Zero}  this\n\t */\n\tTone.Zero.prototype.dispose = function(){\n\t\tTone.SignalBase.prototype.dispose.call(this);\n\t\tthis._gain.dispose();\n\t\tthis._gain = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.Zero;\n});\n","define([\"../core/Tone\", \"../core/AudioNode\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class  Tone.Merge brings two signals into the left and right\n\t *          channels of a single stereo channel.\n\t *\n\t *  @constructor\n\t *  @extends {Tone.AudioNode}\n\t *  @example\n\t * var merge = new Tone.Merge().toMaster();\n\t * //routing a sine tone in the left channel\n\t * //and noise in the right channel\n\t * var osc = new Tone.Oscillator().connect(merge.left);\n\t * var noise = new Tone.Noise().connect(merge.right);\n\t * //starting our oscillators\n\t * noise.start();\n\t * osc.start();\n\t */\n\tTone.Merge = function(){\n\n\t\tTone.AudioNode.call(this);\n\t\tthis.createInsOuts(2, 0);\n\n\t\t/**\n\t\t *  The left input channel.\n\t\t *  Alias for <code>input[0]</code>\n\t\t *  @type {GainNode}\n\t\t */\n\t\tthis.left = this.input[0] = new Tone.Gain();\n\n\t\t/**\n\t\t *  The right input channel.\n\t\t *  Alias for <code>input[1]</code>.\n\t\t *  @type {GainNode}\n\t\t */\n\t\tthis.right = this.input[1] = new Tone.Gain();\n\n\t\t/**\n\t\t *  the merger node for the two channels\n\t\t *  @type {ChannelMergerNode}\n\t\t *  @private\n\t\t */\n\t\tthis._merger = this.output = this.context.createChannelMerger(2);\n\n\t\t//connections\n\t\tthis.left.connect(this._merger, 0, 0);\n\t\tthis.right.connect(this._merger, 0, 1);\n\n\t\tthis.left.channelCount = 1;\n\t\tthis.right.channelCount = 1;\n\t\tthis.left.channelCountMode = \"explicit\";\n\t\tthis.right.channelCountMode = \"explicit\";\n\t};\n\n\tTone.extend(Tone.Merge, Tone.AudioNode);\n\n\t/**\n\t *  Clean up.\n\t *  @returns {Tone.Merge} this\n\t */\n\tTone.Merge.prototype.dispose = function(){\n\t\tTone.AudioNode.prototype.dispose.call(this);\n\t\tthis.left.dispose();\n\t\tthis.left = null;\n\t\tthis.right.dispose();\n\t\tthis.right = null;\n\t\tthis._merger.disconnect();\n\t\tthis._merger = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.Merge;\n});\n","define([\"../core/Tone\", \"../shim/AudioContext\"], function(Tone){\n\n\tif (Tone.supported){\n\n\t\t//fixes safari only bug which is still present in 11\n\t\tvar ua = navigator.userAgent.toLowerCase();\n\t\tvar isSafari = ua.includes(\"safari\") && !ua.includes(\"chrome\");\n\t\tif (isSafari){\n\n\t\t\tvar WaveShaperNode = function(context){\n\n\t\t\t\tthis._internalNode = this.input = this.output = context._native_createWaveShaper();\n\n\t\t\t\tthis._curve = null;\n\n\t\t\t\tfor (var prop in this._internalNode){\n\t\t\t\t\tthis._defineProperty(this._internalNode, prop);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tObject.defineProperty(WaveShaperNode.prototype, \"curve\", {\n\t\t\t\t\"get\" : function(){\n\t\t\t\t\treturn this._curve;\n\t\t\t\t},\n\t\t\t\t\"set\" : function(curve){\n\t\t\t\t\tthis._curve = curve;\n\t\t\t\t\tvar array = new Float32Array(curve.length+1);\n\t\t\t\t\tarray.set(curve, 1);\n\t\t\t\t\tarray[0] = curve[0];\n\t\t\t\t\tthis._internalNode.curve = array;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tWaveShaperNode.prototype._defineProperty = function(context, prop){\n\t\t\t\tif (Tone.isUndef(this[prop])){\n\t\t\t\t\tObject.defineProperty(this, prop, {\n\t\t\t\t\t\t\"get\" : function(){\n\t\t\t\t\t\t\tif (typeof context[prop] === \"function\"){\n\t\t\t\t\t\t\t\treturn context[prop].bind(context);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn context[prop];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"set\" : function(val){\n\t\t\t\t\t\t\tcontext[prop] = val;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tTone.global.AudioContext.prototype._native_createWaveShaper = Tone.global.AudioContext.prototype.createWaveShaper;\n\t\t\tTone.global.AudioContext.prototype.createWaveShaper = function(){\n\t\t\t\treturn new WaveShaperNode(this);\n\t\t\t};\n\t\t}\n\t}\n\n});\n","define([\"../core/Tone\"], function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class Tone.Emitter gives classes which extend it\n\t *         the ability to listen for and emit events.\n\t *         Inspiration and reference from Jerome Etienne's [MicroEvent](https://github.com/jeromeetienne/microevent.js).\n\t *         MIT (c) 2011 Jerome Etienne.\n\t *\n\t *  @extends {Tone}\n\t */\n\tTone.Emitter = function(){\n\t\tTone.call(this);\n\t\t/**\n\t\t *  Contains all of the events.\n\t\t *  @private\n\t\t *  @type  {Object}\n\t\t */\n\t\tthis._events = {};\n\t};\n\n\tTone.extend(Tone.Emitter);\n\n\t/**\n\t *  Bind a callback to a specific event.\n\t *  @param  {String}    event     The name of the event to listen for.\n\t *  @param  {Function}  callback  The callback to invoke when the\n\t *                                event is emitted\n\t *  @return  {Tone.Emitter}    this\n\t */\n\tTone.Emitter.prototype.on = function(event, callback){\n\t\t//split the event\n\t\tvar events = event.split(/\\W+/);\n\t\tfor (var i = 0; i < events.length; i++){\n\t\t\tvar eventName = events[i];\n\t\t\tif (!this._events.hasOwnProperty(eventName)){\n\t\t\t\tthis._events[eventName] = [];\n\t\t\t}\n\t\t\tthis._events[eventName].push(callback);\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Bind a callback which is only invoked once\n\t *  @param  {String}    event     The name of the event to listen for.\n\t *  @param  {Function}  callback  The callback to invoke when the\n\t *                                event is emitted\n\t *  @return  {Tone.Emitter}    this\n\t */\n\tTone.Emitter.prototype.once = function(event, callback){\n\t\tvar boundCallback = function(){\n\t\t\t//invoke the callback\n\t\t\tcallback.apply(this, arguments);\n\t\t\tthis.off(event, boundCallback);\n\t\t}.bind(this);\n\t\tthis.on(event, boundCallback);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Remove the event listener.\n\t *  @param  {String}    event     The event to stop listening to.\n\t *  @param  {Function=}  callback  The callback which was bound to\n\t *                                the event with Tone.Emitter.on.\n\t *                                If no callback is given, all callbacks\n\t *                                events are removed.\n\t *  @return  {Tone.Emitter}    this\n\t */\n\tTone.Emitter.prototype.off = function(event, callback){\n\t\tvar events = event.split(/\\W+/);\n\t\tfor (var ev = 0; ev < events.length; ev++){\n\t\t\tevent = events[ev];\n\t\t\tif (this._events.hasOwnProperty(event)){\n\t\t\t\tif (Tone.isUndef(callback)){\n\t\t\t\t\tthis._events[event] = [];\n\t\t\t\t} else {\n\t\t\t\t\tvar eventList = this._events[event];\n\t\t\t\t\tfor (var i = 0; i < eventList.length; i++){\n\t\t\t\t\t\tif (eventList[i] === callback){\n\t\t\t\t\t\t\teventList.splice(i, 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Invoke all of the callbacks bound to the event\n\t *  with any arguments passed in.\n\t *  @param  {String}  event  The name of the event.\n\t *  @param {*} args... The arguments to pass to the functions listening.\n\t *  @return  {Tone.Emitter}  this\n\t */\n\tTone.Emitter.prototype.emit = function(event){\n\t\tif (this._events){\n\t\t\tvar args = Array.apply(null, arguments).slice(1);\n\t\t\tif (this._events.hasOwnProperty(event)){\n\t\t\t\tvar eventList = this._events[event].slice(0);\n\t\t\t\tfor (var i = 0, len = eventList.length; i < len; i++){\n\t\t\t\t\teventList[i].apply(this, args);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Add Emitter functions (on/off/emit) to the object\n\t *  @param  {Object|Function}  object  The object or class to extend.\n\t *  @returns {Tone.Emitter}\n\t */\n\tTone.Emitter.mixin = function(object){\n\t\tvar functions = [\"on\", \"once\", \"off\", \"emit\"];\n\t\tobject._events = {};\n\t\tfor (var i = 0; i < functions.length; i++){\n\t\t\tvar func = functions[i];\n\t\t\tvar emitterFunc = Tone.Emitter.prototype[func];\n\t\t\tobject[func] = emitterFunc;\n\t\t}\n\t\treturn Tone.Emitter;\n\t};\n\n\t/**\n\t *  Clean up\n\t *  @return  {Tone.Emitter}  this\n\t */\n\tTone.Emitter.prototype.dispose = function(){\n\t\tTone.prototype.dispose.call(this);\n\t\tthis._events = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.Emitter;\n});\n","define([\"../core/Tone\", \"../signal/WaveShaper\", \"../component/Merge\", \"../signal/Zero\",\n\t\"../component/Split\", \"../core/Gain\", \"../signal/Signal\", \"../core/Context\"], function(Tone){\n\n\tif (Tone.supported && !Tone.global.AudioContext.prototype.createStereoPanner){\n\n\t\t/**\n\t\t * @class Shimmed StereoPannerNode\n\t\t * @param  {AudioContext} context\n\t\t * @private\n\t\t */\n\t\tvar StereoPannerNode = function(context){\n\n\t\t\t/**\n\t\t\t * The audio context\n\t\t\t * @type {AudioContext}\n\t\t\t */\n\t\t\tthis.context = context;\n\n\t\t\t/**\n\t\t\t * The left/right panning. [-1, 1]\n\t\t\t * @type {AudioRange}\n\t\t\t * @signal\n\t\t\t */\n\t\t\tthis.pan = new Tone.Signal(0, Tone.Type.AudioRange);\n\n\t\t\t/**\n\t\t\t * Equal power scaling of the right gain\n\t\t\t * @type {Tone.WaveShaper}\n\t\t\t */\n\t\t\tvar rightWaveShaper = new Tone.WaveShaper(function(val){\n\t\t\t\treturn Tone.equalPowerScale((val+1)/2);\n\t\t\t}, 4096);\n\n\t\t\t/**\n\t\t\t * Equal power scaling of the left gain\n\t\t\t * @type {Tone.WaveShaper}\n\t\t\t * @private\n\t\t\t */\n\t\t\tvar leftWaveShaper = new Tone.WaveShaper(function(val){\n\t\t\t\treturn Tone.equalPowerScale(1 - (val+1)/2);\n\t\t\t}, 4096);\n\n\t\t\t/**\n\t\t\t * The left gain value\n\t\t\t * @type {Tone.Gain}\n\t\t\t * @private\n\t\t\t */\n\t\t\tvar leftGain = new Tone.Gain();\n\n\t\t\t/**\n\t\t\t * The right gain value\n\t\t\t * @type {Tone.Gain}\n\t\t\t * @private\n\t\t\t */\n\t\t\tvar rightGain = new Tone.Gain();\n\n\t\t\t/**\n\t\t\t * Split the incoming signal\n\t\t\t * @type {Tone.Split}\n\t\t\t * @private\n\t\t\t */\n\t\t\tvar split = this.input = new Tone.Split();\n\t\t\t//fixes safari issue with splitting audio\n\t\t\tsplit._splitter.channelCountMode = \"explicit\";\n\n\t\t\t/**\n\t\t\t * Keeps the waveshapers from optimizing 0s\n\t\t\t * @type {Tone.Zero}\n\t\t\t * @private\n\t\t\t */\n\t\t\tvar zero = new Tone.Zero();\n\t\t\tzero.fan(rightWaveShaper, leftWaveShaper);\n\n\t\t\t/**\n\t\t\t * Merge the outgoing signal\n\t\t\t * @type {Tone.Merge}\n\t\t\t * @private\n\t\t\t */\n\t\t\tvar merge = this.output = new Tone.Merge();\n\n\t\t\t//connections\n\t\t\tsplit.left.chain(leftGain, merge.left);\n\t\t\tsplit.right.chain(rightGain, merge.right);\n\t\t\tthis.pan.chain(leftWaveShaper, leftGain.gain);\n\t\t\tthis.pan.chain(rightWaveShaper, rightGain.gain);\n\t\t};\n\n\t\tStereoPannerNode.prototype.disconnect = function(){\n\t\t\tthis.output.disconnect.apply(this.output, arguments);\n\t\t};\n\n\t\tStereoPannerNode.prototype.connect = function(){\n\t\t\tthis.output.connect.apply(this.output, arguments);\n\t\t};\n\n\t\t//add it to the AudioContext\n\t\tAudioContext.prototype.createStereoPanner = function(){\n\t\t\treturn new StereoPannerNode(this);\n\t\t};\n\t\tTone.Context.prototype.createStereoPanner = function(){\n\t\t\treturn new StereoPannerNode(this);\n\t\t};\n\t}\n\n});\n","module.exports = \"13.3.6\";\n","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n"],"sourceRoot":""}